// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		FormDefElement:        newFormDefElement(db, opts...),
		FormDefInfo:           newFormDefInfo(db, opts...),
		InstNodeTask:          newInstNodeTask(db, opts...),
		InstNodeTaskFormper:   newInstNodeTaskFormper(db, opts...),
		InstTaskDetail:        newInstTaskDetail(db, opts...),
		InstTaskOpLog:         newInstTaskOpLog(db, opts...),
		InstTaskParam:         newInstTaskParam(db, opts...),
		InstTaskParamAttr:     newInstTaskParamAttr(db, opts...),
		InstUserTask:          newInstUserTask(db, opts...),
		InstUserTaskOpinion:   newInstUserTaskOpinion(db, opts...),
		ModelAuth:             newModelAuth(db, opts...),
		ModelDetail:           newModelDetail(db, opts...),
		ModelExtProp:          newModelExtProp(db, opts...),
		ModelGroup:            newModelGroup(db, opts...),
		ModelVersion:          newModelVersion(db, opts...),
		OrganizationInfo:      newOrganizationInfo(db, opts...),
		ProcessDefInfo:        newProcessDefInfo(db, opts...),
		ProcessDefNode:        newProcessDefNode(db, opts...),
		ProcessDefNodeFormper: newProcessDefNodeFormper(db, opts...),
		ProcessDefNodeUser:    newProcessDefNodeUser(db, opts...),
		RoleInfo:              newRoleInfo(db, opts...),
		UserInfo:              newUserInfo(db, opts...),
		UserRoleLink:          newUserRoleLink(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	FormDefElement        formDefElement
	FormDefInfo           formDefInfo
	InstNodeTask          instNodeTask
	InstNodeTaskFormper   instNodeTaskFormper
	InstTaskDetail        instTaskDetail
	InstTaskOpLog         instTaskOpLog
	InstTaskParam         instTaskParam
	InstTaskParamAttr     instTaskParamAttr
	InstUserTask          instUserTask
	InstUserTaskOpinion   instUserTaskOpinion
	ModelAuth             modelAuth
	ModelDetail           modelDetail
	ModelExtProp          modelExtProp
	ModelGroup            modelGroup
	ModelVersion          modelVersion
	OrganizationInfo      organizationInfo
	ProcessDefInfo        processDefInfo
	ProcessDefNode        processDefNode
	ProcessDefNodeFormper processDefNodeFormper
	ProcessDefNodeUser    processDefNodeUser
	RoleInfo              roleInfo
	UserInfo              userInfo
	UserRoleLink          userRoleLink
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		FormDefElement:        q.FormDefElement.clone(db),
		FormDefInfo:           q.FormDefInfo.clone(db),
		InstNodeTask:          q.InstNodeTask.clone(db),
		InstNodeTaskFormper:   q.InstNodeTaskFormper.clone(db),
		InstTaskDetail:        q.InstTaskDetail.clone(db),
		InstTaskOpLog:         q.InstTaskOpLog.clone(db),
		InstTaskParam:         q.InstTaskParam.clone(db),
		InstTaskParamAttr:     q.InstTaskParamAttr.clone(db),
		InstUserTask:          q.InstUserTask.clone(db),
		InstUserTaskOpinion:   q.InstUserTaskOpinion.clone(db),
		ModelAuth:             q.ModelAuth.clone(db),
		ModelDetail:           q.ModelDetail.clone(db),
		ModelExtProp:          q.ModelExtProp.clone(db),
		ModelGroup:            q.ModelGroup.clone(db),
		ModelVersion:          q.ModelVersion.clone(db),
		OrganizationInfo:      q.OrganizationInfo.clone(db),
		ProcessDefInfo:        q.ProcessDefInfo.clone(db),
		ProcessDefNode:        q.ProcessDefNode.clone(db),
		ProcessDefNodeFormper: q.ProcessDefNodeFormper.clone(db),
		ProcessDefNodeUser:    q.ProcessDefNodeUser.clone(db),
		RoleInfo:              q.RoleInfo.clone(db),
		UserInfo:              q.UserInfo.clone(db),
		UserRoleLink:          q.UserRoleLink.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		FormDefElement:        q.FormDefElement.replaceDB(db),
		FormDefInfo:           q.FormDefInfo.replaceDB(db),
		InstNodeTask:          q.InstNodeTask.replaceDB(db),
		InstNodeTaskFormper:   q.InstNodeTaskFormper.replaceDB(db),
		InstTaskDetail:        q.InstTaskDetail.replaceDB(db),
		InstTaskOpLog:         q.InstTaskOpLog.replaceDB(db),
		InstTaskParam:         q.InstTaskParam.replaceDB(db),
		InstTaskParamAttr:     q.InstTaskParamAttr.replaceDB(db),
		InstUserTask:          q.InstUserTask.replaceDB(db),
		InstUserTaskOpinion:   q.InstUserTaskOpinion.replaceDB(db),
		ModelAuth:             q.ModelAuth.replaceDB(db),
		ModelDetail:           q.ModelDetail.replaceDB(db),
		ModelExtProp:          q.ModelExtProp.replaceDB(db),
		ModelGroup:            q.ModelGroup.replaceDB(db),
		ModelVersion:          q.ModelVersion.replaceDB(db),
		OrganizationInfo:      q.OrganizationInfo.replaceDB(db),
		ProcessDefInfo:        q.ProcessDefInfo.replaceDB(db),
		ProcessDefNode:        q.ProcessDefNode.replaceDB(db),
		ProcessDefNodeFormper: q.ProcessDefNodeFormper.replaceDB(db),
		ProcessDefNodeUser:    q.ProcessDefNodeUser.replaceDB(db),
		RoleInfo:              q.RoleInfo.replaceDB(db),
		UserInfo:              q.UserInfo.replaceDB(db),
		UserRoleLink:          q.UserRoleLink.replaceDB(db),
	}
}

type queryCtx struct {
	FormDefElement        *formDefElementDo
	FormDefInfo           *formDefInfoDo
	InstNodeTask          *instNodeTaskDo
	InstNodeTaskFormper   *instNodeTaskFormperDo
	InstTaskDetail        *instTaskDetailDo
	InstTaskOpLog         *instTaskOpLogDo
	InstTaskParam         *instTaskParamDo
	InstTaskParamAttr     *instTaskParamAttrDo
	InstUserTask          *instUserTaskDo
	InstUserTaskOpinion   *instUserTaskOpinionDo
	ModelAuth             *modelAuthDo
	ModelDetail           *modelDetailDo
	ModelExtProp          *modelExtPropDo
	ModelGroup            *modelGroupDo
	ModelVersion          *modelVersionDo
	OrganizationInfo      *organizationInfoDo
	ProcessDefInfo        *processDefInfoDo
	ProcessDefNode        *processDefNodeDo
	ProcessDefNodeFormper *processDefNodeFormperDo
	ProcessDefNodeUser    *processDefNodeUserDo
	RoleInfo              *roleInfoDo
	UserInfo              *userInfoDo
	UserRoleLink          *userRoleLinkDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		FormDefElement:        q.FormDefElement.WithContext(ctx),
		FormDefInfo:           q.FormDefInfo.WithContext(ctx),
		InstNodeTask:          q.InstNodeTask.WithContext(ctx),
		InstNodeTaskFormper:   q.InstNodeTaskFormper.WithContext(ctx),
		InstTaskDetail:        q.InstTaskDetail.WithContext(ctx),
		InstTaskOpLog:         q.InstTaskOpLog.WithContext(ctx),
		InstTaskParam:         q.InstTaskParam.WithContext(ctx),
		InstTaskParamAttr:     q.InstTaskParamAttr.WithContext(ctx),
		InstUserTask:          q.InstUserTask.WithContext(ctx),
		InstUserTaskOpinion:   q.InstUserTaskOpinion.WithContext(ctx),
		ModelAuth:             q.ModelAuth.WithContext(ctx),
		ModelDetail:           q.ModelDetail.WithContext(ctx),
		ModelExtProp:          q.ModelExtProp.WithContext(ctx),
		ModelGroup:            q.ModelGroup.WithContext(ctx),
		ModelVersion:          q.ModelVersion.WithContext(ctx),
		OrganizationInfo:      q.OrganizationInfo.WithContext(ctx),
		ProcessDefInfo:        q.ProcessDefInfo.WithContext(ctx),
		ProcessDefNode:        q.ProcessDefNode.WithContext(ctx),
		ProcessDefNodeFormper: q.ProcessDefNodeFormper.WithContext(ctx),
		ProcessDefNodeUser:    q.ProcessDefNodeUser.WithContext(ctx),
		RoleInfo:              q.RoleInfo.WithContext(ctx),
		UserInfo:              q.UserInfo.WithContext(ctx),
		UserRoleLink:          q.UserRoleLink.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
