// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newFormDefDetail(db *gorm.DB, opts ...gen.DOOption) formDefDetail {
	_formDefDetail := formDefDetail{}

	_formDefDetail.formDefDetailDo.UseDB(db, opts...)
	_formDefDetail.formDefDetailDo.UseModel(&model.FormDefDetail{})

	tableName := _formDefDetail.formDefDetailDo.TableName()
	_formDefDetail.ALL = field.NewAsterisk(tableName)
	_formDefDetail.ID = field.NewInt64(tableName, "id")
	_formDefDetail.FormDefID = field.NewString(tableName, "form_def_id")
	_formDefDetail.FormDefName = field.NewString(tableName, "form_def_name")
	_formDefDetail.HTMLContent = field.NewString(tableName, "html_content")
	_formDefDetail.HTMLPageURL = field.NewString(tableName, "html_page_url")
	_formDefDetail.Status = field.NewInt32(tableName, "status")
	_formDefDetail.Remark = field.NewString(tableName, "remark")
	_formDefDetail.CreateTime = field.NewTime(tableName, "create_time")
	_formDefDetail.CreateUser = field.NewString(tableName, "create_user")
	_formDefDetail.UpdateTime = field.NewTime(tableName, "update_time")
	_formDefDetail.UpdateUser = field.NewString(tableName, "update_user")

	_formDefDetail.fillFieldMap()

	return _formDefDetail
}

type formDefDetail struct {
	formDefDetailDo formDefDetailDo

	ALL         field.Asterisk
	ID          field.Int64  // 唯一id
	FormDefID   field.String // 表单模板id;唯一id
	FormDefName field.String // 表单名称
	HTMLContent field.String // 表单定义结构化数据
	HTMLPageURL field.String // html页面访问路径;html页面文件访问路径
	Status      field.Int32  // 模板状态【1：草稿；2：发布；3：停用】
	Remark      field.String // 表单描述
	CreateTime  field.Time   // 创建时间
	CreateUser  field.String // 创建人
	UpdateTime  field.Time   // 更新时间
	UpdateUser  field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f formDefDetail) Table(newTableName string) *formDefDetail {
	f.formDefDetailDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formDefDetail) As(alias string) *formDefDetail {
	f.formDefDetailDo.DO = *(f.formDefDetailDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formDefDetail) updateTableName(table string) *formDefDetail {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FormDefID = field.NewString(table, "form_def_id")
	f.FormDefName = field.NewString(table, "form_def_name")
	f.HTMLContent = field.NewString(table, "html_content")
	f.HTMLPageURL = field.NewString(table, "html_page_url")
	f.Status = field.NewInt32(table, "status")
	f.Remark = field.NewString(table, "remark")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *formDefDetail) WithContext(ctx context.Context) *formDefDetailDo {
	return f.formDefDetailDo.WithContext(ctx)
}

func (f formDefDetail) TableName() string { return f.formDefDetailDo.TableName() }

func (f formDefDetail) Alias() string { return f.formDefDetailDo.Alias() }

func (f *formDefDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formDefDetail) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["form_def_id"] = f.FormDefID
	f.fieldMap["form_def_name"] = f.FormDefName
	f.fieldMap["html_content"] = f.HTMLContent
	f.fieldMap["html_page_url"] = f.HTMLPageURL
	f.fieldMap["status"] = f.Status
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f formDefDetail) clone(db *gorm.DB) formDefDetail {
	f.formDefDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f formDefDetail) replaceDB(db *gorm.DB) formDefDetail {
	f.formDefDetailDo.ReplaceDB(db)
	return f
}

type formDefDetailDo struct{ gen.DO }

func (f formDefDetailDo) Debug() *formDefDetailDo {
	return f.withDO(f.DO.Debug())
}

func (f formDefDetailDo) WithContext(ctx context.Context) *formDefDetailDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formDefDetailDo) ReadDB() *formDefDetailDo {
	return f.Clauses(dbresolver.Read)
}

func (f formDefDetailDo) WriteDB() *formDefDetailDo {
	return f.Clauses(dbresolver.Write)
}

func (f formDefDetailDo) Session(config *gorm.Session) *formDefDetailDo {
	return f.withDO(f.DO.Session(config))
}

func (f formDefDetailDo) Clauses(conds ...clause.Expression) *formDefDetailDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formDefDetailDo) Returning(value interface{}, columns ...string) *formDefDetailDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formDefDetailDo) Not(conds ...gen.Condition) *formDefDetailDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formDefDetailDo) Or(conds ...gen.Condition) *formDefDetailDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formDefDetailDo) Select(conds ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formDefDetailDo) Where(conds ...gen.Condition) *formDefDetailDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formDefDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *formDefDetailDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f formDefDetailDo) Order(conds ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formDefDetailDo) Distinct(cols ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formDefDetailDo) Omit(cols ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formDefDetailDo) Join(table schema.Tabler, on ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formDefDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formDefDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formDefDetailDo) Group(cols ...field.Expr) *formDefDetailDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formDefDetailDo) Having(conds ...gen.Condition) *formDefDetailDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formDefDetailDo) Limit(limit int) *formDefDetailDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formDefDetailDo) Offset(offset int) *formDefDetailDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formDefDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *formDefDetailDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formDefDetailDo) Unscoped() *formDefDetailDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formDefDetailDo) Create(values ...*model.FormDefDetail) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formDefDetailDo) CreateInBatches(values []*model.FormDefDetail, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formDefDetailDo) Save(values ...*model.FormDefDetail) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formDefDetailDo) First() (*model.FormDefDetail, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefDetail), nil
	}
}

func (f formDefDetailDo) Take() (*model.FormDefDetail, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefDetail), nil
	}
}

func (f formDefDetailDo) Last() (*model.FormDefDetail, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefDetail), nil
	}
}

func (f formDefDetailDo) Find() ([]*model.FormDefDetail, error) {
	result, err := f.DO.Find()
	return result.([]*model.FormDefDetail), err
}

func (f formDefDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FormDefDetail, err error) {
	buf := make([]*model.FormDefDetail, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formDefDetailDo) FindInBatches(result *[]*model.FormDefDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formDefDetailDo) Attrs(attrs ...field.AssignExpr) *formDefDetailDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formDefDetailDo) Assign(attrs ...field.AssignExpr) *formDefDetailDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formDefDetailDo) Joins(fields ...field.RelationField) *formDefDetailDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formDefDetailDo) Preload(fields ...field.RelationField) *formDefDetailDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formDefDetailDo) FirstOrInit() (*model.FormDefDetail, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefDetail), nil
	}
}

func (f formDefDetailDo) FirstOrCreate() (*model.FormDefDetail, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefDetail), nil
	}
}

func (f formDefDetailDo) FindByPage(offset int, limit int) (result []*model.FormDefDetail, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formDefDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formDefDetailDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formDefDetailDo) Delete(models ...*model.FormDefDetail) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formDefDetailDo) withDO(do gen.Dao) *formDefDetailDo {
	f.DO = *do.(*gen.DO)
	return f
}
