// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newInstUserTaskOpinion(db *gorm.DB, opts ...gen.DOOption) instUserTaskOpinion {
	_instUserTaskOpinion := instUserTaskOpinion{}

	_instUserTaskOpinion.instUserTaskOpinionDo.UseDB(db, opts...)
	_instUserTaskOpinion.instUserTaskOpinionDo.UseModel(&model.InstUserTaskOpinion{})

	tableName := _instUserTaskOpinion.instUserTaskOpinionDo.TableName()
	_instUserTaskOpinion.ALL = field.NewAsterisk(tableName)
	_instUserTaskOpinion.ID = field.NewInt64(tableName, "id")
	_instUserTaskOpinion.InstTaskID = field.NewString(tableName, "inst_task_id")
	_instUserTaskOpinion.NodeTaskID = field.NewString(tableName, "node_task_id")
	_instUserTaskOpinion.UserTaskID = field.NewString(tableName, "user_task_id")
	_instUserTaskOpinion.NodeID = field.NewString(tableName, "node_id")
	_instUserTaskOpinion.OpinionID = field.NewString(tableName, "opinion_id")
	_instUserTaskOpinion.Opinion = field.NewInt32(tableName, "opinion")
	_instUserTaskOpinion.OpinionDesc = field.NewString(tableName, "opinion_desc")
	_instUserTaskOpinion.OpUserID = field.NewString(tableName, "op_user_id")
	_instUserTaskOpinion.OpUserName = field.NewString(tableName, "op_user_name")
	_instUserTaskOpinion.CreateTime = field.NewTime(tableName, "create_time")
	_instUserTaskOpinion.UpdateTime = field.NewTime(tableName, "update_time")
	_instUserTaskOpinion.OpinionTime = field.NewTime(tableName, "opinion_time")

	_instUserTaskOpinion.fillFieldMap()

	return _instUserTaskOpinion
}

type instUserTaskOpinion struct {
	instUserTaskOpinionDo instUserTaskOpinionDo

	ALL         field.Asterisk
	ID          field.Int64  // 唯一id
	InstTaskID  field.String // 实例任务id
	NodeTaskID  field.String // 节点任务id
	UserTaskID  field.String // 用户任务id
	NodeID      field.String // 节点id
	OpinionID   field.String // 意见id
	Opinion     field.Int32  // 处理意见【1：未处理；2：同意；3：不同意；4：回退；5：终止；6：撤回】
	OpinionDesc field.String // 处理意见描述
	OpUserID    field.String // 操作用户id
	OpUserName  field.String // 操作用户名称
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间
	OpinionTime field.Time   // 发表意见时间

	fieldMap map[string]field.Expr
}

func (i instUserTaskOpinion) Table(newTableName string) *instUserTaskOpinion {
	i.instUserTaskOpinionDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i instUserTaskOpinion) As(alias string) *instUserTaskOpinion {
	i.instUserTaskOpinionDo.DO = *(i.instUserTaskOpinionDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *instUserTaskOpinion) updateTableName(table string) *instUserTaskOpinion {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.InstTaskID = field.NewString(table, "inst_task_id")
	i.NodeTaskID = field.NewString(table, "node_task_id")
	i.UserTaskID = field.NewString(table, "user_task_id")
	i.NodeID = field.NewString(table, "node_id")
	i.OpinionID = field.NewString(table, "opinion_id")
	i.Opinion = field.NewInt32(table, "opinion")
	i.OpinionDesc = field.NewString(table, "opinion_desc")
	i.OpUserID = field.NewString(table, "op_user_id")
	i.OpUserName = field.NewString(table, "op_user_name")
	i.CreateTime = field.NewTime(table, "create_time")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.OpinionTime = field.NewTime(table, "opinion_time")

	i.fillFieldMap()

	return i
}

func (i *instUserTaskOpinion) WithContext(ctx context.Context) *instUserTaskOpinionDo {
	return i.instUserTaskOpinionDo.WithContext(ctx)
}

func (i instUserTaskOpinion) TableName() string { return i.instUserTaskOpinionDo.TableName() }

func (i instUserTaskOpinion) Alias() string { return i.instUserTaskOpinionDo.Alias() }

func (i *instUserTaskOpinion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *instUserTaskOpinion) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 13)
	i.fieldMap["id"] = i.ID
	i.fieldMap["inst_task_id"] = i.InstTaskID
	i.fieldMap["node_task_id"] = i.NodeTaskID
	i.fieldMap["user_task_id"] = i.UserTaskID
	i.fieldMap["node_id"] = i.NodeID
	i.fieldMap["opinion_id"] = i.OpinionID
	i.fieldMap["opinion"] = i.Opinion
	i.fieldMap["opinion_desc"] = i.OpinionDesc
	i.fieldMap["op_user_id"] = i.OpUserID
	i.fieldMap["op_user_name"] = i.OpUserName
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["opinion_time"] = i.OpinionTime
}

func (i instUserTaskOpinion) clone(db *gorm.DB) instUserTaskOpinion {
	i.instUserTaskOpinionDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i instUserTaskOpinion) replaceDB(db *gorm.DB) instUserTaskOpinion {
	i.instUserTaskOpinionDo.ReplaceDB(db)
	return i
}

type instUserTaskOpinionDo struct{ gen.DO }

func (i instUserTaskOpinionDo) Debug() *instUserTaskOpinionDo {
	return i.withDO(i.DO.Debug())
}

func (i instUserTaskOpinionDo) WithContext(ctx context.Context) *instUserTaskOpinionDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i instUserTaskOpinionDo) ReadDB() *instUserTaskOpinionDo {
	return i.Clauses(dbresolver.Read)
}

func (i instUserTaskOpinionDo) WriteDB() *instUserTaskOpinionDo {
	return i.Clauses(dbresolver.Write)
}

func (i instUserTaskOpinionDo) Session(config *gorm.Session) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Session(config))
}

func (i instUserTaskOpinionDo) Clauses(conds ...clause.Expression) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i instUserTaskOpinionDo) Returning(value interface{}, columns ...string) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i instUserTaskOpinionDo) Not(conds ...gen.Condition) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i instUserTaskOpinionDo) Or(conds ...gen.Condition) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i instUserTaskOpinionDo) Select(conds ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i instUserTaskOpinionDo) Where(conds ...gen.Condition) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i instUserTaskOpinionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *instUserTaskOpinionDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i instUserTaskOpinionDo) Order(conds ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i instUserTaskOpinionDo) Distinct(cols ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i instUserTaskOpinionDo) Omit(cols ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i instUserTaskOpinionDo) Join(table schema.Tabler, on ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i instUserTaskOpinionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i instUserTaskOpinionDo) RightJoin(table schema.Tabler, on ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i instUserTaskOpinionDo) Group(cols ...field.Expr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i instUserTaskOpinionDo) Having(conds ...gen.Condition) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i instUserTaskOpinionDo) Limit(limit int) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i instUserTaskOpinionDo) Offset(offset int) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i instUserTaskOpinionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i instUserTaskOpinionDo) Unscoped() *instUserTaskOpinionDo {
	return i.withDO(i.DO.Unscoped())
}

func (i instUserTaskOpinionDo) Create(values ...*model.InstUserTaskOpinion) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i instUserTaskOpinionDo) CreateInBatches(values []*model.InstUserTaskOpinion, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i instUserTaskOpinionDo) Save(values ...*model.InstUserTaskOpinion) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i instUserTaskOpinionDo) First() (*model.InstUserTaskOpinion, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTaskOpinion), nil
	}
}

func (i instUserTaskOpinionDo) Take() (*model.InstUserTaskOpinion, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTaskOpinion), nil
	}
}

func (i instUserTaskOpinionDo) Last() (*model.InstUserTaskOpinion, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTaskOpinion), nil
	}
}

func (i instUserTaskOpinionDo) Find() ([]*model.InstUserTaskOpinion, error) {
	result, err := i.DO.Find()
	return result.([]*model.InstUserTaskOpinion), err
}

func (i instUserTaskOpinionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstUserTaskOpinion, err error) {
	buf := make([]*model.InstUserTaskOpinion, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i instUserTaskOpinionDo) FindInBatches(result *[]*model.InstUserTaskOpinion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i instUserTaskOpinionDo) Attrs(attrs ...field.AssignExpr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i instUserTaskOpinionDo) Assign(attrs ...field.AssignExpr) *instUserTaskOpinionDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i instUserTaskOpinionDo) Joins(fields ...field.RelationField) *instUserTaskOpinionDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i instUserTaskOpinionDo) Preload(fields ...field.RelationField) *instUserTaskOpinionDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i instUserTaskOpinionDo) FirstOrInit() (*model.InstUserTaskOpinion, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTaskOpinion), nil
	}
}

func (i instUserTaskOpinionDo) FirstOrCreate() (*model.InstUserTaskOpinion, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTaskOpinion), nil
	}
}

func (i instUserTaskOpinionDo) FindByPage(offset int, limit int) (result []*model.InstUserTaskOpinion, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i instUserTaskOpinionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i instUserTaskOpinionDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i instUserTaskOpinionDo) Delete(models ...*model.InstUserTaskOpinion) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *instUserTaskOpinionDo) withDO(do gen.Dao) *instUserTaskOpinionDo {
	i.DO = *do.(*gen.DO)
	return i
}
