// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		FlowDefInfo:      newFlowDefInfo(db, opts...),
		FlowInstInfo:     newFlowInstInfo(db, opts...),
		FlowInstTask:     newFlowInstTask(db, opts...),
		FlowTaskOperator: newFlowTaskOperator(db, opts...),
		FormDefInfo:      newFormDefInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	FlowDefInfo      flowDefInfo
	FlowInstInfo     flowInstInfo
	FlowInstTask     flowInstTask
	FlowTaskOperator flowTaskOperator
	FormDefInfo      formDefInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		FlowDefInfo:      q.FlowDefInfo.clone(db),
		FlowInstInfo:     q.FlowInstInfo.clone(db),
		FlowInstTask:     q.FlowInstTask.clone(db),
		FlowTaskOperator: q.FlowTaskOperator.clone(db),
		FormDefInfo:      q.FormDefInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		FlowDefInfo:      q.FlowDefInfo.replaceDB(db),
		FlowInstInfo:     q.FlowInstInfo.replaceDB(db),
		FlowInstTask:     q.FlowInstTask.replaceDB(db),
		FlowTaskOperator: q.FlowTaskOperator.replaceDB(db),
		FormDefInfo:      q.FormDefInfo.replaceDB(db),
	}
}

type queryCtx struct {
	FlowDefInfo      *flowDefInfoDo
	FlowInstInfo     *flowInstInfoDo
	FlowInstTask     *flowInstTaskDo
	FlowTaskOperator *flowTaskOperatorDo
	FormDefInfo      *formDefInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		FlowDefInfo:      q.FlowDefInfo.WithContext(ctx),
		FlowInstInfo:     q.FlowInstInfo.WithContext(ctx),
		FlowInstTask:     q.FlowInstTask.WithContext(ctx),
		FlowTaskOperator: q.FlowTaskOperator.WithContext(ctx),
		FormDefInfo:      q.FormDefInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
