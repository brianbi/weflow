// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newRoleInfo(db *gorm.DB, opts ...gen.DOOption) roleInfo {
	_roleInfo := roleInfo{}

	_roleInfo.roleInfoDo.UseDB(db, opts...)
	_roleInfo.roleInfoDo.UseModel(&model.RoleInfo{})

	tableName := _roleInfo.roleInfoDo.TableName()
	_roleInfo.ALL = field.NewAsterisk(tableName)
	_roleInfo.ID = field.NewInt64(tableName, "id")
	_roleInfo.RoleID = field.NewString(tableName, "role_id")
	_roleInfo.ParentID = field.NewString(tableName, "parent_id")
	_roleInfo.RoleName = field.NewString(tableName, "role_name")
	_roleInfo.Status = field.NewInt32(tableName, "status")
	_roleInfo.Remark = field.NewString(tableName, "remark")
	_roleInfo.CreateUser = field.NewString(tableName, "create_user")
	_roleInfo.UpdateUser = field.NewString(tableName, "update_user")
	_roleInfo.CreateTime = field.NewTime(tableName, "create_time")
	_roleInfo.UpdateTime = field.NewTime(tableName, "update_time")

	_roleInfo.fillFieldMap()

	return _roleInfo
}

type roleInfo struct {
	roleInfoDo roleInfoDo

	ALL        field.Asterisk
	ID         field.Int64  // 唯一id
	RoleID     field.String // 角色id
	ParentID   field.String // 角色父id
	RoleName   field.String // 角色名称
	Status     field.Int32  // 状态【1：未启用；2：已启用；3：锁定；】
	Remark     field.String // 描述
	CreateUser field.String // 创建人
	UpdateUser field.String // 更新人
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (r roleInfo) Table(newTableName string) *roleInfo {
	r.roleInfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleInfo) As(alias string) *roleInfo {
	r.roleInfoDo.DO = *(r.roleInfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleInfo) updateTableName(table string) *roleInfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RoleID = field.NewString(table, "role_id")
	r.ParentID = field.NewString(table, "parent_id")
	r.RoleName = field.NewString(table, "role_name")
	r.Status = field.NewInt32(table, "status")
	r.Remark = field.NewString(table, "remark")
	r.CreateUser = field.NewString(table, "create_user")
	r.UpdateUser = field.NewString(table, "update_user")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")

	r.fillFieldMap()

	return r
}

func (r *roleInfo) WithContext(ctx context.Context) *roleInfoDo { return r.roleInfoDo.WithContext(ctx) }

func (r roleInfo) TableName() string { return r.roleInfoDo.TableName() }

func (r roleInfo) Alias() string { return r.roleInfoDo.Alias() }

func (r *roleInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleInfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["parent_id"] = r.ParentID
	r.fieldMap["role_name"] = r.RoleName
	r.fieldMap["status"] = r.Status
	r.fieldMap["remark"] = r.Remark
	r.fieldMap["create_user"] = r.CreateUser
	r.fieldMap["update_user"] = r.UpdateUser
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
}

func (r roleInfo) clone(db *gorm.DB) roleInfo {
	r.roleInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleInfo) replaceDB(db *gorm.DB) roleInfo {
	r.roleInfoDo.ReplaceDB(db)
	return r
}

type roleInfoDo struct{ gen.DO }

func (r roleInfoDo) Debug() *roleInfoDo {
	return r.withDO(r.DO.Debug())
}

func (r roleInfoDo) WithContext(ctx context.Context) *roleInfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleInfoDo) ReadDB() *roleInfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleInfoDo) WriteDB() *roleInfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleInfoDo) Session(config *gorm.Session) *roleInfoDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleInfoDo) Clauses(conds ...clause.Expression) *roleInfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleInfoDo) Returning(value interface{}, columns ...string) *roleInfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleInfoDo) Not(conds ...gen.Condition) *roleInfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleInfoDo) Or(conds ...gen.Condition) *roleInfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleInfoDo) Select(conds ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleInfoDo) Where(conds ...gen.Condition) *roleInfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *roleInfoDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r roleInfoDo) Order(conds ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleInfoDo) Distinct(cols ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleInfoDo) Omit(cols ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleInfoDo) Join(table schema.Tabler, on ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleInfoDo) Group(cols ...field.Expr) *roleInfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleInfoDo) Having(conds ...gen.Condition) *roleInfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleInfoDo) Limit(limit int) *roleInfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleInfoDo) Offset(offset int) *roleInfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roleInfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleInfoDo) Unscoped() *roleInfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleInfoDo) Create(values ...*model.RoleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleInfoDo) CreateInBatches(values []*model.RoleInfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleInfoDo) Save(values ...*model.RoleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleInfoDo) First() (*model.RoleInfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) Take() (*model.RoleInfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) Last() (*model.RoleInfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) Find() ([]*model.RoleInfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleInfo), err
}

func (r roleInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleInfo, err error) {
	buf := make([]*model.RoleInfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleInfoDo) FindInBatches(result *[]*model.RoleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleInfoDo) Attrs(attrs ...field.AssignExpr) *roleInfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleInfoDo) Assign(attrs ...field.AssignExpr) *roleInfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleInfoDo) Joins(fields ...field.RelationField) *roleInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleInfoDo) Preload(fields ...field.RelationField) *roleInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleInfoDo) FirstOrInit() (*model.RoleInfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) FirstOrCreate() (*model.RoleInfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) FindByPage(offset int, limit int) (result []*model.RoleInfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleInfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleInfoDo) Delete(models ...*model.RoleInfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleInfoDo) withDO(do gen.Dao) *roleInfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
