// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newProcessDefNodeUser(db *gorm.DB, opts ...gen.DOOption) processDefNodeUser {
	_processDefNodeUser := processDefNodeUser{}

	_processDefNodeUser.processDefNodeUserDo.UseDB(db, opts...)
	_processDefNodeUser.processDefNodeUserDo.UseModel(&model.ProcessDefNodeUser{})

	tableName := _processDefNodeUser.processDefNodeUserDo.TableName()
	_processDefNodeUser.ALL = field.NewAsterisk(tableName)
	_processDefNodeUser.ID = field.NewInt64(tableName, "id")
	_processDefNodeUser.ProcessDefID = field.NewString(tableName, "process_def_id")
	_processDefNodeUser.NodeID = field.NewString(tableName, "node_id")
	_processDefNodeUser.UserName = field.NewString(tableName, "user_name")
	_processDefNodeUser.UserType = field.NewInt32(tableName, "user_type")
	_processDefNodeUser.UserID = field.NewString(tableName, "user_id")
	_processDefNodeUser.Sort = field.NewInt32(tableName, "sort")
	_processDefNodeUser.ObjData = field.NewString(tableName, "obj_data")
	_processDefNodeUser.CreateTime = field.NewTime(tableName, "create_time")
	_processDefNodeUser.CreateUser = field.NewString(tableName, "create_user")
	_processDefNodeUser.UpdateTime = field.NewTime(tableName, "update_time")
	_processDefNodeUser.UpdateUser = field.NewString(tableName, "update_user")

	_processDefNodeUser.fillFieldMap()

	return _processDefNodeUser
}

type processDefNodeUser struct {
	processDefNodeUserDo processDefNodeUserDo

	ALL          field.Asterisk
	ID           field.Int64  // 唯一id
	ProcessDefID field.String // 流程定义id
	NodeID       field.String // 节点id
	UserName     field.String // 处理人名称
	UserType     field.Int32  // 处理人类型【1：用户；2：部门；3：相对岗位；4：表单控件；5：部门岗位】
	UserID       field.String // 处理人对象id;处理对象的id，根据处理人类型区分，如果操作员id、部门id等
	Sort         field.Int32  // 处理人顺序;正序排序
	ObjData      field.String // 对象数据;依据处理人类型取值，相对岗位和表单控件使用该字段存json数据
	CreateTime   field.Time   // 创建时间
	CreateUser   field.String // 创建人
	UpdateTime   field.Time   // 更新时间
	UpdateUser   field.String // 更新人

	fieldMap map[string]field.Expr
}

func (p processDefNodeUser) Table(newTableName string) *processDefNodeUser {
	p.processDefNodeUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p processDefNodeUser) As(alias string) *processDefNodeUser {
	p.processDefNodeUserDo.DO = *(p.processDefNodeUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *processDefNodeUser) updateTableName(table string) *processDefNodeUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProcessDefID = field.NewString(table, "process_def_id")
	p.NodeID = field.NewString(table, "node_id")
	p.UserName = field.NewString(table, "user_name")
	p.UserType = field.NewInt32(table, "user_type")
	p.UserID = field.NewString(table, "user_id")
	p.Sort = field.NewInt32(table, "sort")
	p.ObjData = field.NewString(table, "obj_data")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateUser = field.NewString(table, "create_user")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.UpdateUser = field.NewString(table, "update_user")

	p.fillFieldMap()

	return p
}

func (p *processDefNodeUser) WithContext(ctx context.Context) *processDefNodeUserDo {
	return p.processDefNodeUserDo.WithContext(ctx)
}

func (p processDefNodeUser) TableName() string { return p.processDefNodeUserDo.TableName() }

func (p processDefNodeUser) Alias() string { return p.processDefNodeUserDo.Alias() }

func (p *processDefNodeUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *processDefNodeUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["process_def_id"] = p.ProcessDefID
	p.fieldMap["node_id"] = p.NodeID
	p.fieldMap["user_name"] = p.UserName
	p.fieldMap["user_type"] = p.UserType
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["obj_data"] = p.ObjData
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_user"] = p.CreateUser
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["update_user"] = p.UpdateUser
}

func (p processDefNodeUser) clone(db *gorm.DB) processDefNodeUser {
	p.processDefNodeUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p processDefNodeUser) replaceDB(db *gorm.DB) processDefNodeUser {
	p.processDefNodeUserDo.ReplaceDB(db)
	return p
}

type processDefNodeUserDo struct{ gen.DO }

func (p processDefNodeUserDo) Debug() *processDefNodeUserDo {
	return p.withDO(p.DO.Debug())
}

func (p processDefNodeUserDo) WithContext(ctx context.Context) *processDefNodeUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processDefNodeUserDo) ReadDB() *processDefNodeUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p processDefNodeUserDo) WriteDB() *processDefNodeUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p processDefNodeUserDo) Session(config *gorm.Session) *processDefNodeUserDo {
	return p.withDO(p.DO.Session(config))
}

func (p processDefNodeUserDo) Clauses(conds ...clause.Expression) *processDefNodeUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processDefNodeUserDo) Returning(value interface{}, columns ...string) *processDefNodeUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processDefNodeUserDo) Not(conds ...gen.Condition) *processDefNodeUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processDefNodeUserDo) Or(conds ...gen.Condition) *processDefNodeUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processDefNodeUserDo) Select(conds ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processDefNodeUserDo) Where(conds ...gen.Condition) *processDefNodeUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processDefNodeUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *processDefNodeUserDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p processDefNodeUserDo) Order(conds ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processDefNodeUserDo) Distinct(cols ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processDefNodeUserDo) Omit(cols ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processDefNodeUserDo) Join(table schema.Tabler, on ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processDefNodeUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processDefNodeUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processDefNodeUserDo) Group(cols ...field.Expr) *processDefNodeUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processDefNodeUserDo) Having(conds ...gen.Condition) *processDefNodeUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processDefNodeUserDo) Limit(limit int) *processDefNodeUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processDefNodeUserDo) Offset(offset int) *processDefNodeUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processDefNodeUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *processDefNodeUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processDefNodeUserDo) Unscoped() *processDefNodeUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processDefNodeUserDo) Create(values ...*model.ProcessDefNodeUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processDefNodeUserDo) CreateInBatches(values []*model.ProcessDefNodeUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processDefNodeUserDo) Save(values ...*model.ProcessDefNodeUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processDefNodeUserDo) First() (*model.ProcessDefNodeUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNodeUser), nil
	}
}

func (p processDefNodeUserDo) Take() (*model.ProcessDefNodeUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNodeUser), nil
	}
}

func (p processDefNodeUserDo) Last() (*model.ProcessDefNodeUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNodeUser), nil
	}
}

func (p processDefNodeUserDo) Find() ([]*model.ProcessDefNodeUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProcessDefNodeUser), err
}

func (p processDefNodeUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProcessDefNodeUser, err error) {
	buf := make([]*model.ProcessDefNodeUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processDefNodeUserDo) FindInBatches(result *[]*model.ProcessDefNodeUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processDefNodeUserDo) Attrs(attrs ...field.AssignExpr) *processDefNodeUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processDefNodeUserDo) Assign(attrs ...field.AssignExpr) *processDefNodeUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processDefNodeUserDo) Joins(fields ...field.RelationField) *processDefNodeUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processDefNodeUserDo) Preload(fields ...field.RelationField) *processDefNodeUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processDefNodeUserDo) FirstOrInit() (*model.ProcessDefNodeUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNodeUser), nil
	}
}

func (p processDefNodeUserDo) FirstOrCreate() (*model.ProcessDefNodeUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNodeUser), nil
	}
}

func (p processDefNodeUserDo) FindByPage(offset int, limit int) (result []*model.ProcessDefNodeUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processDefNodeUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processDefNodeUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processDefNodeUserDo) Delete(models ...*model.ProcessDefNodeUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processDefNodeUserDo) withDO(do gen.Dao) *processDefNodeUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
