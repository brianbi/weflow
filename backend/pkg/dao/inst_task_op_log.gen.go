// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newInstTaskOpLog(db *gorm.DB, opts ...gen.DOOption) instTaskOpLog {
	_instTaskOpLog := instTaskOpLog{}

	_instTaskOpLog.instTaskOpLogDo.UseDB(db, opts...)
	_instTaskOpLog.instTaskOpLogDo.UseModel(&model.InstTaskOpLog{})

	tableName := _instTaskOpLog.instTaskOpLogDo.TableName()
	_instTaskOpLog.ALL = field.NewAsterisk(tableName)
	_instTaskOpLog.ID = field.NewInt64(tableName, "id")
	_instTaskOpLog.InstTaskID = field.NewString(tableName, "inst_task_id")
	_instTaskOpLog.NodeID = field.NewString(tableName, "node_id")
	_instTaskOpLog.NodeName = field.NewString(tableName, "node_name")
	_instTaskOpLog.CreateTime = field.NewTime(tableName, "create_time")
	_instTaskOpLog.UpdateTime = field.NewTime(tableName, "update_time")
	_instTaskOpLog.Type = field.NewInt32(tableName, "type")
	_instTaskOpLog.Remark = field.NewString(tableName, "remark")

	_instTaskOpLog.fillFieldMap()

	return _instTaskOpLog
}

type instTaskOpLog struct {
	instTaskOpLogDo instTaskOpLogDo

	ALL        field.Asterisk
	ID         field.Int64  // 唯一id
	InstTaskID field.String // 实例任务id
	NodeID     field.String // 节点任务id
	NodeName   field.String // 节点名称
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	Type       field.Int32  // 类型【1：节点；2：任务；3：其他】
	Remark     field.String // 描述

	fieldMap map[string]field.Expr
}

func (i instTaskOpLog) Table(newTableName string) *instTaskOpLog {
	i.instTaskOpLogDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i instTaskOpLog) As(alias string) *instTaskOpLog {
	i.instTaskOpLogDo.DO = *(i.instTaskOpLogDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *instTaskOpLog) updateTableName(table string) *instTaskOpLog {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.InstTaskID = field.NewString(table, "inst_task_id")
	i.NodeID = field.NewString(table, "node_id")
	i.NodeName = field.NewString(table, "node_name")
	i.CreateTime = field.NewTime(table, "create_time")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.Type = field.NewInt32(table, "type")
	i.Remark = field.NewString(table, "remark")

	i.fillFieldMap()

	return i
}

func (i *instTaskOpLog) WithContext(ctx context.Context) *instTaskOpLogDo {
	return i.instTaskOpLogDo.WithContext(ctx)
}

func (i instTaskOpLog) TableName() string { return i.instTaskOpLogDo.TableName() }

func (i instTaskOpLog) Alias() string { return i.instTaskOpLogDo.Alias() }

func (i *instTaskOpLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *instTaskOpLog) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["inst_task_id"] = i.InstTaskID
	i.fieldMap["node_id"] = i.NodeID
	i.fieldMap["node_name"] = i.NodeName
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["type"] = i.Type
	i.fieldMap["remark"] = i.Remark
}

func (i instTaskOpLog) clone(db *gorm.DB) instTaskOpLog {
	i.instTaskOpLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i instTaskOpLog) replaceDB(db *gorm.DB) instTaskOpLog {
	i.instTaskOpLogDo.ReplaceDB(db)
	return i
}

type instTaskOpLogDo struct{ gen.DO }

func (i instTaskOpLogDo) Debug() *instTaskOpLogDo {
	return i.withDO(i.DO.Debug())
}

func (i instTaskOpLogDo) WithContext(ctx context.Context) *instTaskOpLogDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i instTaskOpLogDo) ReadDB() *instTaskOpLogDo {
	return i.Clauses(dbresolver.Read)
}

func (i instTaskOpLogDo) WriteDB() *instTaskOpLogDo {
	return i.Clauses(dbresolver.Write)
}

func (i instTaskOpLogDo) Session(config *gorm.Session) *instTaskOpLogDo {
	return i.withDO(i.DO.Session(config))
}

func (i instTaskOpLogDo) Clauses(conds ...clause.Expression) *instTaskOpLogDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i instTaskOpLogDo) Returning(value interface{}, columns ...string) *instTaskOpLogDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i instTaskOpLogDo) Not(conds ...gen.Condition) *instTaskOpLogDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i instTaskOpLogDo) Or(conds ...gen.Condition) *instTaskOpLogDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i instTaskOpLogDo) Select(conds ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i instTaskOpLogDo) Where(conds ...gen.Condition) *instTaskOpLogDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i instTaskOpLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *instTaskOpLogDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i instTaskOpLogDo) Order(conds ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i instTaskOpLogDo) Distinct(cols ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i instTaskOpLogDo) Omit(cols ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i instTaskOpLogDo) Join(table schema.Tabler, on ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i instTaskOpLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i instTaskOpLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i instTaskOpLogDo) Group(cols ...field.Expr) *instTaskOpLogDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i instTaskOpLogDo) Having(conds ...gen.Condition) *instTaskOpLogDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i instTaskOpLogDo) Limit(limit int) *instTaskOpLogDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i instTaskOpLogDo) Offset(offset int) *instTaskOpLogDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i instTaskOpLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *instTaskOpLogDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i instTaskOpLogDo) Unscoped() *instTaskOpLogDo {
	return i.withDO(i.DO.Unscoped())
}

func (i instTaskOpLogDo) Create(values ...*model.InstTaskOpLog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i instTaskOpLogDo) CreateInBatches(values []*model.InstTaskOpLog, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i instTaskOpLogDo) Save(values ...*model.InstTaskOpLog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i instTaskOpLogDo) First() (*model.InstTaskOpLog, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskOpLog), nil
	}
}

func (i instTaskOpLogDo) Take() (*model.InstTaskOpLog, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskOpLog), nil
	}
}

func (i instTaskOpLogDo) Last() (*model.InstTaskOpLog, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskOpLog), nil
	}
}

func (i instTaskOpLogDo) Find() ([]*model.InstTaskOpLog, error) {
	result, err := i.DO.Find()
	return result.([]*model.InstTaskOpLog), err
}

func (i instTaskOpLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstTaskOpLog, err error) {
	buf := make([]*model.InstTaskOpLog, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i instTaskOpLogDo) FindInBatches(result *[]*model.InstTaskOpLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i instTaskOpLogDo) Attrs(attrs ...field.AssignExpr) *instTaskOpLogDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i instTaskOpLogDo) Assign(attrs ...field.AssignExpr) *instTaskOpLogDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i instTaskOpLogDo) Joins(fields ...field.RelationField) *instTaskOpLogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i instTaskOpLogDo) Preload(fields ...field.RelationField) *instTaskOpLogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i instTaskOpLogDo) FirstOrInit() (*model.InstTaskOpLog, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskOpLog), nil
	}
}

func (i instTaskOpLogDo) FirstOrCreate() (*model.InstTaskOpLog, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskOpLog), nil
	}
}

func (i instTaskOpLogDo) FindByPage(offset int, limit int) (result []*model.InstTaskOpLog, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i instTaskOpLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i instTaskOpLogDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i instTaskOpLogDo) Delete(models ...*model.InstTaskOpLog) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *instTaskOpLogDo) withDO(do gen.Dao) *instTaskOpLogDo {
	i.DO = *do.(*gen.DO)
	return i
}
