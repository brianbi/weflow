// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newInstTaskDetail(db *gorm.DB, opts ...gen.DOOption) instTaskDetail {
	_instTaskDetail := instTaskDetail{}

	_instTaskDetail.instTaskDetailDo.UseDB(db, opts...)
	_instTaskDetail.instTaskDetailDo.UseModel(&model.InstTaskDetail{})

	tableName := _instTaskDetail.instTaskDetailDo.TableName()
	_instTaskDetail.ALL = field.NewAsterisk(tableName)
	_instTaskDetail.ID = field.NewInt64(tableName, "id")
	_instTaskDetail.InstTaskID = field.NewString(tableName, "inst_task_id")
	_instTaskDetail.ModelID = field.NewString(tableName, "model_id")
	_instTaskDetail.ProcessDefID = field.NewString(tableName, "process_def_id")
	_instTaskDetail.FormDefID = field.NewString(tableName, "form_def_id")
	_instTaskDetail.VersionID = field.NewString(tableName, "version_id")
	_instTaskDetail.TaskName = field.NewString(tableName, "task_name")
	_instTaskDetail.Status = field.NewInt32(tableName, "status")
	_instTaskDetail.Remark = field.NewString(tableName, "remark")
	_instTaskDetail.CreateTime = field.NewTime(tableName, "create_time")
	_instTaskDetail.CreateUserID = field.NewString(tableName, "create_user_id")
	_instTaskDetail.CreateUserName = field.NewString(tableName, "create_user_name")
	_instTaskDetail.UpdateTime = field.NewTime(tableName, "update_time")
	_instTaskDetail.UpdateUserID = field.NewString(tableName, "update_user_id")
	_instTaskDetail.UpdateUserName = field.NewString(tableName, "update_user_name")
	_instTaskDetail.StartTime = field.NewTime(tableName, "start_time")
	_instTaskDetail.EndTime = field.NewTime(tableName, "end_time")

	_instTaskDetail.fillFieldMap()

	return _instTaskDetail
}

type instTaskDetail struct {
	instTaskDetailDo instTaskDetailDo

	ALL            field.Asterisk
	ID             field.Int64  // 唯一id
	InstTaskID     field.String // 实例任务id
	ModelID        field.String // 模板id
	ProcessDefID   field.String // 流程定义id
	FormDefID      field.String // 表单定义id
	VersionID      field.String // 版本id
	TaskName       field.String // 实例任务名称
	Status         field.Int32  // 任务状态【1：创建中(草稿)；2：进行中； 3：终止； 4：完成； 5：挂起；6：回退】
	Remark         field.String // 描述
	CreateTime     field.Time   // 创建时间
	CreateUserID   field.String // 创建人id
	CreateUserName field.String // 创建人名称
	UpdateTime     field.Time   // 更新时间
	UpdateUserID   field.String // 更新人id
	UpdateUserName field.String // 更新人名称
	StartTime      field.Time   // 发起时间
	EndTime        field.Time   // 结束时间

	fieldMap map[string]field.Expr
}

func (i instTaskDetail) Table(newTableName string) *instTaskDetail {
	i.instTaskDetailDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i instTaskDetail) As(alias string) *instTaskDetail {
	i.instTaskDetailDo.DO = *(i.instTaskDetailDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *instTaskDetail) updateTableName(table string) *instTaskDetail {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.InstTaskID = field.NewString(table, "inst_task_id")
	i.ModelID = field.NewString(table, "model_id")
	i.ProcessDefID = field.NewString(table, "process_def_id")
	i.FormDefID = field.NewString(table, "form_def_id")
	i.VersionID = field.NewString(table, "version_id")
	i.TaskName = field.NewString(table, "task_name")
	i.Status = field.NewInt32(table, "status")
	i.Remark = field.NewString(table, "remark")
	i.CreateTime = field.NewTime(table, "create_time")
	i.CreateUserID = field.NewString(table, "create_user_id")
	i.CreateUserName = field.NewString(table, "create_user_name")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.UpdateUserID = field.NewString(table, "update_user_id")
	i.UpdateUserName = field.NewString(table, "update_user_name")
	i.StartTime = field.NewTime(table, "start_time")
	i.EndTime = field.NewTime(table, "end_time")

	i.fillFieldMap()

	return i
}

func (i *instTaskDetail) WithContext(ctx context.Context) *instTaskDetailDo {
	return i.instTaskDetailDo.WithContext(ctx)
}

func (i instTaskDetail) TableName() string { return i.instTaskDetailDo.TableName() }

func (i instTaskDetail) Alias() string { return i.instTaskDetailDo.Alias() }

func (i *instTaskDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *instTaskDetail) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 17)
	i.fieldMap["id"] = i.ID
	i.fieldMap["inst_task_id"] = i.InstTaskID
	i.fieldMap["model_id"] = i.ModelID
	i.fieldMap["process_def_id"] = i.ProcessDefID
	i.fieldMap["form_def_id"] = i.FormDefID
	i.fieldMap["version_id"] = i.VersionID
	i.fieldMap["task_name"] = i.TaskName
	i.fieldMap["status"] = i.Status
	i.fieldMap["remark"] = i.Remark
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["create_user_id"] = i.CreateUserID
	i.fieldMap["create_user_name"] = i.CreateUserName
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["update_user_id"] = i.UpdateUserID
	i.fieldMap["update_user_name"] = i.UpdateUserName
	i.fieldMap["start_time"] = i.StartTime
	i.fieldMap["end_time"] = i.EndTime
}

func (i instTaskDetail) clone(db *gorm.DB) instTaskDetail {
	i.instTaskDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i instTaskDetail) replaceDB(db *gorm.DB) instTaskDetail {
	i.instTaskDetailDo.ReplaceDB(db)
	return i
}

type instTaskDetailDo struct{ gen.DO }

func (i instTaskDetailDo) Debug() *instTaskDetailDo {
	return i.withDO(i.DO.Debug())
}

func (i instTaskDetailDo) WithContext(ctx context.Context) *instTaskDetailDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i instTaskDetailDo) ReadDB() *instTaskDetailDo {
	return i.Clauses(dbresolver.Read)
}

func (i instTaskDetailDo) WriteDB() *instTaskDetailDo {
	return i.Clauses(dbresolver.Write)
}

func (i instTaskDetailDo) Session(config *gorm.Session) *instTaskDetailDo {
	return i.withDO(i.DO.Session(config))
}

func (i instTaskDetailDo) Clauses(conds ...clause.Expression) *instTaskDetailDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i instTaskDetailDo) Returning(value interface{}, columns ...string) *instTaskDetailDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i instTaskDetailDo) Not(conds ...gen.Condition) *instTaskDetailDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i instTaskDetailDo) Or(conds ...gen.Condition) *instTaskDetailDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i instTaskDetailDo) Select(conds ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i instTaskDetailDo) Where(conds ...gen.Condition) *instTaskDetailDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i instTaskDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *instTaskDetailDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i instTaskDetailDo) Order(conds ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i instTaskDetailDo) Distinct(cols ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i instTaskDetailDo) Omit(cols ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i instTaskDetailDo) Join(table schema.Tabler, on ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i instTaskDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i instTaskDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i instTaskDetailDo) Group(cols ...field.Expr) *instTaskDetailDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i instTaskDetailDo) Having(conds ...gen.Condition) *instTaskDetailDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i instTaskDetailDo) Limit(limit int) *instTaskDetailDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i instTaskDetailDo) Offset(offset int) *instTaskDetailDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i instTaskDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *instTaskDetailDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i instTaskDetailDo) Unscoped() *instTaskDetailDo {
	return i.withDO(i.DO.Unscoped())
}

func (i instTaskDetailDo) Create(values ...*model.InstTaskDetail) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i instTaskDetailDo) CreateInBatches(values []*model.InstTaskDetail, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i instTaskDetailDo) Save(values ...*model.InstTaskDetail) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i instTaskDetailDo) First() (*model.InstTaskDetail, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskDetail), nil
	}
}

func (i instTaskDetailDo) Take() (*model.InstTaskDetail, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskDetail), nil
	}
}

func (i instTaskDetailDo) Last() (*model.InstTaskDetail, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskDetail), nil
	}
}

func (i instTaskDetailDo) Find() ([]*model.InstTaskDetail, error) {
	result, err := i.DO.Find()
	return result.([]*model.InstTaskDetail), err
}

func (i instTaskDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstTaskDetail, err error) {
	buf := make([]*model.InstTaskDetail, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i instTaskDetailDo) FindInBatches(result *[]*model.InstTaskDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i instTaskDetailDo) Attrs(attrs ...field.AssignExpr) *instTaskDetailDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i instTaskDetailDo) Assign(attrs ...field.AssignExpr) *instTaskDetailDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i instTaskDetailDo) Joins(fields ...field.RelationField) *instTaskDetailDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i instTaskDetailDo) Preload(fields ...field.RelationField) *instTaskDetailDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i instTaskDetailDo) FirstOrInit() (*model.InstTaskDetail, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskDetail), nil
	}
}

func (i instTaskDetailDo) FirstOrCreate() (*model.InstTaskDetail, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskDetail), nil
	}
}

func (i instTaskDetailDo) FindByPage(offset int, limit int) (result []*model.InstTaskDetail, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i instTaskDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i instTaskDetailDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i instTaskDetailDo) Delete(models ...*model.InstTaskDetail) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *instTaskDetailDo) withDO(do gen.Dao) *instTaskDetailDo {
	i.DO = *do.(*gen.DO)
	return i
}
