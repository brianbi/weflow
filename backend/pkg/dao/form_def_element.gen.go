// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newFormDefElement(db *gorm.DB, opts ...gen.DOOption) formDefElement {
	_formDefElement := formDefElement{}

	_formDefElement.formDefElementDo.UseDB(db, opts...)
	_formDefElement.formDefElementDo.UseModel(&model.FormDefElement{})

	tableName := _formDefElement.formDefElementDo.TableName()
	_formDefElement.ALL = field.NewAsterisk(tableName)
	_formDefElement.ID = field.NewInt64(tableName, "id")
	_formDefElement.FormDefID = field.NewString(tableName, "form_def_id")
	_formDefElement.EleName = field.NewString(tableName, "ele_name")
	_formDefElement.EleID = field.NewString(tableName, "ele_id")
	_formDefElement.LabelType = field.NewString(tableName, "label_type")
	_formDefElement.EleType = field.NewInt32(tableName, "ele_type")
	_formDefElement.EleDefault = field.NewString(tableName, "ele_default")
	_formDefElement.Remark = field.NewString(tableName, "remark")
	_formDefElement.CreateTime = field.NewTime(tableName, "create_time")
	_formDefElement.CreateUser = field.NewString(tableName, "create_user")
	_formDefElement.UpdateTime = field.NewTime(tableName, "update_time")
	_formDefElement.UpdateUser = field.NewString(tableName, "update_user")

	_formDefElement.fillFieldMap()

	return _formDefElement
}

type formDefElement struct {
	formDefElementDo formDefElementDo

	ALL        field.Asterisk
	ID         field.Int64  // 唯一id
	FormDefID  field.String // 表单模板id;唯一id
	EleName    field.String // 元素名称
	EleID      field.String // 元素标识id;表单内元素唯一id，可通过该id关联表单内元素
	LabelType  field.String // 元素标签类型;html标签：input、select等
	EleType    field.Int32  // 元素类型【1：文本；2：复选：3：下拉；4：单选】
	EleDefault field.String // 元素默认值
	Remark     field.String // 元素描述
	CreateTime field.Time   // 创建时间
	CreateUser field.String // 创建人
	UpdateTime field.Time   // 更新时间
	UpdateUser field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f formDefElement) Table(newTableName string) *formDefElement {
	f.formDefElementDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formDefElement) As(alias string) *formDefElement {
	f.formDefElementDo.DO = *(f.formDefElementDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formDefElement) updateTableName(table string) *formDefElement {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FormDefID = field.NewString(table, "form_def_id")
	f.EleName = field.NewString(table, "ele_name")
	f.EleID = field.NewString(table, "ele_id")
	f.LabelType = field.NewString(table, "label_type")
	f.EleType = field.NewInt32(table, "ele_type")
	f.EleDefault = field.NewString(table, "ele_default")
	f.Remark = field.NewString(table, "remark")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *formDefElement) WithContext(ctx context.Context) *formDefElementDo {
	return f.formDefElementDo.WithContext(ctx)
}

func (f formDefElement) TableName() string { return f.formDefElementDo.TableName() }

func (f formDefElement) Alias() string { return f.formDefElementDo.Alias() }

func (f *formDefElement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formDefElement) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["id"] = f.ID
	f.fieldMap["form_def_id"] = f.FormDefID
	f.fieldMap["ele_name"] = f.EleName
	f.fieldMap["ele_id"] = f.EleID
	f.fieldMap["label_type"] = f.LabelType
	f.fieldMap["ele_type"] = f.EleType
	f.fieldMap["ele_default"] = f.EleDefault
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f formDefElement) clone(db *gorm.DB) formDefElement {
	f.formDefElementDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f formDefElement) replaceDB(db *gorm.DB) formDefElement {
	f.formDefElementDo.ReplaceDB(db)
	return f
}

type formDefElementDo struct{ gen.DO }

func (f formDefElementDo) Debug() *formDefElementDo {
	return f.withDO(f.DO.Debug())
}

func (f formDefElementDo) WithContext(ctx context.Context) *formDefElementDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formDefElementDo) ReadDB() *formDefElementDo {
	return f.Clauses(dbresolver.Read)
}

func (f formDefElementDo) WriteDB() *formDefElementDo {
	return f.Clauses(dbresolver.Write)
}

func (f formDefElementDo) Session(config *gorm.Session) *formDefElementDo {
	return f.withDO(f.DO.Session(config))
}

func (f formDefElementDo) Clauses(conds ...clause.Expression) *formDefElementDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formDefElementDo) Returning(value interface{}, columns ...string) *formDefElementDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formDefElementDo) Not(conds ...gen.Condition) *formDefElementDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formDefElementDo) Or(conds ...gen.Condition) *formDefElementDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formDefElementDo) Select(conds ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formDefElementDo) Where(conds ...gen.Condition) *formDefElementDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formDefElementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *formDefElementDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f formDefElementDo) Order(conds ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formDefElementDo) Distinct(cols ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formDefElementDo) Omit(cols ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formDefElementDo) Join(table schema.Tabler, on ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formDefElementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formDefElementDo) RightJoin(table schema.Tabler, on ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formDefElementDo) Group(cols ...field.Expr) *formDefElementDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formDefElementDo) Having(conds ...gen.Condition) *formDefElementDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formDefElementDo) Limit(limit int) *formDefElementDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formDefElementDo) Offset(offset int) *formDefElementDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formDefElementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *formDefElementDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formDefElementDo) Unscoped() *formDefElementDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formDefElementDo) Create(values ...*model.FormDefElement) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formDefElementDo) CreateInBatches(values []*model.FormDefElement, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formDefElementDo) Save(values ...*model.FormDefElement) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formDefElementDo) First() (*model.FormDefElement, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefElement), nil
	}
}

func (f formDefElementDo) Take() (*model.FormDefElement, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefElement), nil
	}
}

func (f formDefElementDo) Last() (*model.FormDefElement, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefElement), nil
	}
}

func (f formDefElementDo) Find() ([]*model.FormDefElement, error) {
	result, err := f.DO.Find()
	return result.([]*model.FormDefElement), err
}

func (f formDefElementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FormDefElement, err error) {
	buf := make([]*model.FormDefElement, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formDefElementDo) FindInBatches(result *[]*model.FormDefElement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formDefElementDo) Attrs(attrs ...field.AssignExpr) *formDefElementDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formDefElementDo) Assign(attrs ...field.AssignExpr) *formDefElementDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formDefElementDo) Joins(fields ...field.RelationField) *formDefElementDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formDefElementDo) Preload(fields ...field.RelationField) *formDefElementDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formDefElementDo) FirstOrInit() (*model.FormDefElement, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefElement), nil
	}
}

func (f formDefElementDo) FirstOrCreate() (*model.FormDefElement, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefElement), nil
	}
}

func (f formDefElementDo) FindByPage(offset int, limit int) (result []*model.FormDefElement, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formDefElementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formDefElementDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formDefElementDo) Delete(models ...*model.FormDefElement) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formDefElementDo) withDO(do gen.Dao) *formDefElementDo {
	f.DO = *do.(*gen.DO)
	return f
}
