// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newFormDefInfo(db *gorm.DB, opts ...gen.DOOption) formDefInfo {
	_formDefInfo := formDefInfo{}

	_formDefInfo.formDefInfoDo.UseDB(db, opts...)
	_formDefInfo.formDefInfoDo.UseModel(&model.FormDefInfo{})

	tableName := _formDefInfo.formDefInfoDo.TableName()
	_formDefInfo.ALL = field.NewAsterisk(tableName)
	_formDefInfo.ID = field.NewInt32(tableName, "id")
	_formDefInfo.Name = field.NewString(tableName, "name")
	_formDefInfo.FormDefID = field.NewString(tableName, "form_def_id")
	_formDefInfo.State = field.NewInt32(tableName, "state")
	_formDefInfo.CreateTime = field.NewTime(tableName, "create_time")
	_formDefInfo.CreateUser = field.NewString(tableName, "create_user")
	_formDefInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_formDefInfo.UpdateUser = field.NewString(tableName, "update_user")

	_formDefInfo.fillFieldMap()

	return _formDefInfo
}

type formDefInfo struct {
	formDefInfoDo formDefInfoDo

	ALL        field.Asterisk
	ID         field.Int32  // 主键
	Name       field.String // 表单定义名称
	FormDefID  field.String // 表单定义id
	State      field.Int32  // 状态
	CreateTime field.Time   // 创建时间
	CreateUser field.String // 创建人
	UpdateTime field.Time   // 更新时间
	UpdateUser field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f formDefInfo) Table(newTableName string) *formDefInfo {
	f.formDefInfoDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formDefInfo) As(alias string) *formDefInfo {
	f.formDefInfoDo.DO = *(f.formDefInfoDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formDefInfo) updateTableName(table string) *formDefInfo {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.FormDefID = field.NewString(table, "form_def_id")
	f.State = field.NewInt32(table, "state")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *formDefInfo) WithContext(ctx context.Context) *formDefInfoDo {
	return f.formDefInfoDo.WithContext(ctx)
}

func (f formDefInfo) TableName() string { return f.formDefInfoDo.TableName() }

func (f formDefInfo) Alias() string { return f.formDefInfoDo.Alias() }

func (f *formDefInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formDefInfo) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["form_def_id"] = f.FormDefID
	f.fieldMap["state"] = f.State
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f formDefInfo) clone(db *gorm.DB) formDefInfo {
	f.formDefInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f formDefInfo) replaceDB(db *gorm.DB) formDefInfo {
	f.formDefInfoDo.ReplaceDB(db)
	return f
}

type formDefInfoDo struct{ gen.DO }

func (f formDefInfoDo) Debug() *formDefInfoDo {
	return f.withDO(f.DO.Debug())
}

func (f formDefInfoDo) WithContext(ctx context.Context) *formDefInfoDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formDefInfoDo) ReadDB() *formDefInfoDo {
	return f.Clauses(dbresolver.Read)
}

func (f formDefInfoDo) WriteDB() *formDefInfoDo {
	return f.Clauses(dbresolver.Write)
}

func (f formDefInfoDo) Session(config *gorm.Session) *formDefInfoDo {
	return f.withDO(f.DO.Session(config))
}

func (f formDefInfoDo) Clauses(conds ...clause.Expression) *formDefInfoDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formDefInfoDo) Returning(value interface{}, columns ...string) *formDefInfoDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formDefInfoDo) Not(conds ...gen.Condition) *formDefInfoDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formDefInfoDo) Or(conds ...gen.Condition) *formDefInfoDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formDefInfoDo) Select(conds ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formDefInfoDo) Where(conds ...gen.Condition) *formDefInfoDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formDefInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *formDefInfoDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f formDefInfoDo) Order(conds ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formDefInfoDo) Distinct(cols ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formDefInfoDo) Omit(cols ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formDefInfoDo) Join(table schema.Tabler, on ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formDefInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formDefInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formDefInfoDo) Group(cols ...field.Expr) *formDefInfoDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formDefInfoDo) Having(conds ...gen.Condition) *formDefInfoDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formDefInfoDo) Limit(limit int) *formDefInfoDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formDefInfoDo) Offset(offset int) *formDefInfoDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formDefInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *formDefInfoDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formDefInfoDo) Unscoped() *formDefInfoDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formDefInfoDo) Create(values ...*model.FormDefInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formDefInfoDo) CreateInBatches(values []*model.FormDefInfo, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formDefInfoDo) Save(values ...*model.FormDefInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formDefInfoDo) First() (*model.FormDefInfo, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefInfo), nil
	}
}

func (f formDefInfoDo) Take() (*model.FormDefInfo, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefInfo), nil
	}
}

func (f formDefInfoDo) Last() (*model.FormDefInfo, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefInfo), nil
	}
}

func (f formDefInfoDo) Find() ([]*model.FormDefInfo, error) {
	result, err := f.DO.Find()
	return result.([]*model.FormDefInfo), err
}

func (f formDefInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FormDefInfo, err error) {
	buf := make([]*model.FormDefInfo, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formDefInfoDo) FindInBatches(result *[]*model.FormDefInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formDefInfoDo) Attrs(attrs ...field.AssignExpr) *formDefInfoDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formDefInfoDo) Assign(attrs ...field.AssignExpr) *formDefInfoDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formDefInfoDo) Joins(fields ...field.RelationField) *formDefInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formDefInfoDo) Preload(fields ...field.RelationField) *formDefInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formDefInfoDo) FirstOrInit() (*model.FormDefInfo, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefInfo), nil
	}
}

func (f formDefInfoDo) FirstOrCreate() (*model.FormDefInfo, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDefInfo), nil
	}
}

func (f formDefInfoDo) FindByPage(offset int, limit int) (result []*model.FormDefInfo, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formDefInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formDefInfoDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formDefInfoDo) Delete(models ...*model.FormDefInfo) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formDefInfoDo) withDO(do gen.Dao) *formDefInfoDo {
	f.DO = *do.(*gen.DO)
	return f
}
