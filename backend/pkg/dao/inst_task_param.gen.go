// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newInstTaskParam(db *gorm.DB, opts ...gen.DOOption) instTaskParam {
	_instTaskParam := instTaskParam{}

	_instTaskParam.instTaskParamDo.UseDB(db, opts...)
	_instTaskParam.instTaskParamDo.UseModel(&model.InstTaskParam{})

	tableName := _instTaskParam.instTaskParamDo.TableName()
	_instTaskParam.ALL = field.NewAsterisk(tableName)
	_instTaskParam.ID = field.NewInt64(tableName, "id")
	_instTaskParam.InstTaskID = field.NewString(tableName, "inst_task_id")
	_instTaskParam.ParamID = field.NewString(tableName, "param_id")
	_instTaskParam.ParamName = field.NewString(tableName, "param_name")
	_instTaskParam.ParamValue = field.NewString(tableName, "param_value")
	_instTaskParam.CreateTime = field.NewTime(tableName, "create_time")
	_instTaskParam.UpdateTime = field.NewTime(tableName, "update_time")
	_instTaskParam.ParamDataType = field.NewString(tableName, "param_data_type")
	_instTaskParam.ParamBinary = field.NewBytes(tableName, "param_binary")

	_instTaskParam.fillFieldMap()

	return _instTaskParam
}

type instTaskParam struct {
	instTaskParamDo instTaskParamDo

	ALL           field.Asterisk
	ID            field.Int64  // 唯一id
	InstTaskID    field.String // 实例任务id
	ParamID       field.String // 参数id;参数的唯一标识
	ParamName     field.String // 参数名称;参数的名称
	ParamValue    field.String // 参数值
	CreateTime    field.Time   // 创建时间
	UpdateTime    field.Time   // 更新时间
	ParamDataType field.String // 参数数据类型【string：字符串；int ：整形数值；float：浮点型数值；object：对象；array：数组；decimal：金额；long：长整型；table：表格；boolean：布尔】
	ParamBinary   field.Bytes  // 参数二进制值;可存二进制值对象

	fieldMap map[string]field.Expr
}

func (i instTaskParam) Table(newTableName string) *instTaskParam {
	i.instTaskParamDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i instTaskParam) As(alias string) *instTaskParam {
	i.instTaskParamDo.DO = *(i.instTaskParamDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *instTaskParam) updateTableName(table string) *instTaskParam {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.InstTaskID = field.NewString(table, "inst_task_id")
	i.ParamID = field.NewString(table, "param_id")
	i.ParamName = field.NewString(table, "param_name")
	i.ParamValue = field.NewString(table, "param_value")
	i.CreateTime = field.NewTime(table, "create_time")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.ParamDataType = field.NewString(table, "param_data_type")
	i.ParamBinary = field.NewBytes(table, "param_binary")

	i.fillFieldMap()

	return i
}

func (i *instTaskParam) WithContext(ctx context.Context) *instTaskParamDo {
	return i.instTaskParamDo.WithContext(ctx)
}

func (i instTaskParam) TableName() string { return i.instTaskParamDo.TableName() }

func (i instTaskParam) Alias() string { return i.instTaskParamDo.Alias() }

func (i *instTaskParam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *instTaskParam) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["id"] = i.ID
	i.fieldMap["inst_task_id"] = i.InstTaskID
	i.fieldMap["param_id"] = i.ParamID
	i.fieldMap["param_name"] = i.ParamName
	i.fieldMap["param_value"] = i.ParamValue
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["param_data_type"] = i.ParamDataType
	i.fieldMap["param_binary"] = i.ParamBinary
}

func (i instTaskParam) clone(db *gorm.DB) instTaskParam {
	i.instTaskParamDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i instTaskParam) replaceDB(db *gorm.DB) instTaskParam {
	i.instTaskParamDo.ReplaceDB(db)
	return i
}

type instTaskParamDo struct{ gen.DO }

func (i instTaskParamDo) Debug() *instTaskParamDo {
	return i.withDO(i.DO.Debug())
}

func (i instTaskParamDo) WithContext(ctx context.Context) *instTaskParamDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i instTaskParamDo) ReadDB() *instTaskParamDo {
	return i.Clauses(dbresolver.Read)
}

func (i instTaskParamDo) WriteDB() *instTaskParamDo {
	return i.Clauses(dbresolver.Write)
}

func (i instTaskParamDo) Session(config *gorm.Session) *instTaskParamDo {
	return i.withDO(i.DO.Session(config))
}

func (i instTaskParamDo) Clauses(conds ...clause.Expression) *instTaskParamDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i instTaskParamDo) Returning(value interface{}, columns ...string) *instTaskParamDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i instTaskParamDo) Not(conds ...gen.Condition) *instTaskParamDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i instTaskParamDo) Or(conds ...gen.Condition) *instTaskParamDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i instTaskParamDo) Select(conds ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i instTaskParamDo) Where(conds ...gen.Condition) *instTaskParamDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i instTaskParamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *instTaskParamDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i instTaskParamDo) Order(conds ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i instTaskParamDo) Distinct(cols ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i instTaskParamDo) Omit(cols ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i instTaskParamDo) Join(table schema.Tabler, on ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i instTaskParamDo) LeftJoin(table schema.Tabler, on ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i instTaskParamDo) RightJoin(table schema.Tabler, on ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i instTaskParamDo) Group(cols ...field.Expr) *instTaskParamDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i instTaskParamDo) Having(conds ...gen.Condition) *instTaskParamDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i instTaskParamDo) Limit(limit int) *instTaskParamDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i instTaskParamDo) Offset(offset int) *instTaskParamDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i instTaskParamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *instTaskParamDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i instTaskParamDo) Unscoped() *instTaskParamDo {
	return i.withDO(i.DO.Unscoped())
}

func (i instTaskParamDo) Create(values ...*model.InstTaskParam) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i instTaskParamDo) CreateInBatches(values []*model.InstTaskParam, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i instTaskParamDo) Save(values ...*model.InstTaskParam) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i instTaskParamDo) First() (*model.InstTaskParam, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskParam), nil
	}
}

func (i instTaskParamDo) Take() (*model.InstTaskParam, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskParam), nil
	}
}

func (i instTaskParamDo) Last() (*model.InstTaskParam, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskParam), nil
	}
}

func (i instTaskParamDo) Find() ([]*model.InstTaskParam, error) {
	result, err := i.DO.Find()
	return result.([]*model.InstTaskParam), err
}

func (i instTaskParamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstTaskParam, err error) {
	buf := make([]*model.InstTaskParam, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i instTaskParamDo) FindInBatches(result *[]*model.InstTaskParam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i instTaskParamDo) Attrs(attrs ...field.AssignExpr) *instTaskParamDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i instTaskParamDo) Assign(attrs ...field.AssignExpr) *instTaskParamDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i instTaskParamDo) Joins(fields ...field.RelationField) *instTaskParamDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i instTaskParamDo) Preload(fields ...field.RelationField) *instTaskParamDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i instTaskParamDo) FirstOrInit() (*model.InstTaskParam, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskParam), nil
	}
}

func (i instTaskParamDo) FirstOrCreate() (*model.InstTaskParam, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstTaskParam), nil
	}
}

func (i instTaskParamDo) FindByPage(offset int, limit int) (result []*model.InstTaskParam, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i instTaskParamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i instTaskParamDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i instTaskParamDo) Delete(models ...*model.InstTaskParam) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *instTaskParamDo) withDO(do gen.Dao) *instTaskParamDo {
	i.DO = *do.(*gen.DO)
	return i
}
