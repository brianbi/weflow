// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newProcessDefInfo(db *gorm.DB, opts ...gen.DOOption) processDefInfo {
	_processDefInfo := processDefInfo{}

	_processDefInfo.processDefInfoDo.UseDB(db, opts...)
	_processDefInfo.processDefInfoDo.UseModel(&model.ProcessDefInfo{})

	tableName := _processDefInfo.processDefInfoDo.TableName()
	_processDefInfo.ALL = field.NewAsterisk(tableName)
	_processDefInfo.ID = field.NewInt64(tableName, "id")
	_processDefInfo.ProcessDefID = field.NewString(tableName, "process_def_id")
	_processDefInfo.ProcessDefName = field.NewString(tableName, "process_def_name")
	_processDefInfo.Status = field.NewInt32(tableName, "status")
	_processDefInfo.Remark = field.NewString(tableName, "remark")
	_processDefInfo.StructData = field.NewString(tableName, "struct_data")
	_processDefInfo.CreateTime = field.NewTime(tableName, "create_time")
	_processDefInfo.CreateUser = field.NewString(tableName, "create_user")
	_processDefInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_processDefInfo.UpdateUser = field.NewString(tableName, "update_user")

	_processDefInfo.fillFieldMap()

	return _processDefInfo
}

type processDefInfo struct {
	processDefInfoDo processDefInfoDo

	ALL            field.Asterisk
	ID             field.Int64  // 唯一id
	ProcessDefID   field.String // 流程定义id
	ProcessDefName field.String // 流程定义名称
	Status         field.Int32  // 状态【1：草稿；2：发布可用；3：停用】
	Remark         field.String // 描述
	StructData     field.String // 流程结构化数据
	CreateTime     field.Time   // 创建时间
	CreateUser     field.String // 创建人
	UpdateTime     field.Time   // 更新时间
	UpdateUser     field.String // 更新人

	fieldMap map[string]field.Expr
}

func (p processDefInfo) Table(newTableName string) *processDefInfo {
	p.processDefInfoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p processDefInfo) As(alias string) *processDefInfo {
	p.processDefInfoDo.DO = *(p.processDefInfoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *processDefInfo) updateTableName(table string) *processDefInfo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProcessDefID = field.NewString(table, "process_def_id")
	p.ProcessDefName = field.NewString(table, "process_def_name")
	p.Status = field.NewInt32(table, "status")
	p.Remark = field.NewString(table, "remark")
	p.StructData = field.NewString(table, "struct_data")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateUser = field.NewString(table, "create_user")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.UpdateUser = field.NewString(table, "update_user")

	p.fillFieldMap()

	return p
}

func (p *processDefInfo) WithContext(ctx context.Context) *processDefInfoDo {
	return p.processDefInfoDo.WithContext(ctx)
}

func (p processDefInfo) TableName() string { return p.processDefInfoDo.TableName() }

func (p processDefInfo) Alias() string { return p.processDefInfoDo.Alias() }

func (p *processDefInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *processDefInfo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["process_def_id"] = p.ProcessDefID
	p.fieldMap["process_def_name"] = p.ProcessDefName
	p.fieldMap["status"] = p.Status
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["struct_data"] = p.StructData
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_user"] = p.CreateUser
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["update_user"] = p.UpdateUser
}

func (p processDefInfo) clone(db *gorm.DB) processDefInfo {
	p.processDefInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p processDefInfo) replaceDB(db *gorm.DB) processDefInfo {
	p.processDefInfoDo.ReplaceDB(db)
	return p
}

type processDefInfoDo struct{ gen.DO }

func (p processDefInfoDo) Debug() *processDefInfoDo {
	return p.withDO(p.DO.Debug())
}

func (p processDefInfoDo) WithContext(ctx context.Context) *processDefInfoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processDefInfoDo) ReadDB() *processDefInfoDo {
	return p.Clauses(dbresolver.Read)
}

func (p processDefInfoDo) WriteDB() *processDefInfoDo {
	return p.Clauses(dbresolver.Write)
}

func (p processDefInfoDo) Session(config *gorm.Session) *processDefInfoDo {
	return p.withDO(p.DO.Session(config))
}

func (p processDefInfoDo) Clauses(conds ...clause.Expression) *processDefInfoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processDefInfoDo) Returning(value interface{}, columns ...string) *processDefInfoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processDefInfoDo) Not(conds ...gen.Condition) *processDefInfoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processDefInfoDo) Or(conds ...gen.Condition) *processDefInfoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processDefInfoDo) Select(conds ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processDefInfoDo) Where(conds ...gen.Condition) *processDefInfoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processDefInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *processDefInfoDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p processDefInfoDo) Order(conds ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processDefInfoDo) Distinct(cols ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processDefInfoDo) Omit(cols ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processDefInfoDo) Join(table schema.Tabler, on ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processDefInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processDefInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processDefInfoDo) Group(cols ...field.Expr) *processDefInfoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processDefInfoDo) Having(conds ...gen.Condition) *processDefInfoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processDefInfoDo) Limit(limit int) *processDefInfoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processDefInfoDo) Offset(offset int) *processDefInfoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processDefInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *processDefInfoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processDefInfoDo) Unscoped() *processDefInfoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processDefInfoDo) Create(values ...*model.ProcessDefInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processDefInfoDo) CreateInBatches(values []*model.ProcessDefInfo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processDefInfoDo) Save(values ...*model.ProcessDefInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processDefInfoDo) First() (*model.ProcessDefInfo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefInfo), nil
	}
}

func (p processDefInfoDo) Take() (*model.ProcessDefInfo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefInfo), nil
	}
}

func (p processDefInfoDo) Last() (*model.ProcessDefInfo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefInfo), nil
	}
}

func (p processDefInfoDo) Find() ([]*model.ProcessDefInfo, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProcessDefInfo), err
}

func (p processDefInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProcessDefInfo, err error) {
	buf := make([]*model.ProcessDefInfo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processDefInfoDo) FindInBatches(result *[]*model.ProcessDefInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processDefInfoDo) Attrs(attrs ...field.AssignExpr) *processDefInfoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processDefInfoDo) Assign(attrs ...field.AssignExpr) *processDefInfoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processDefInfoDo) Joins(fields ...field.RelationField) *processDefInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processDefInfoDo) Preload(fields ...field.RelationField) *processDefInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processDefInfoDo) FirstOrInit() (*model.ProcessDefInfo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefInfo), nil
	}
}

func (p processDefInfoDo) FirstOrCreate() (*model.ProcessDefInfo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefInfo), nil
	}
}

func (p processDefInfoDo) FindByPage(offset int, limit int) (result []*model.ProcessDefInfo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processDefInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processDefInfoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processDefInfoDo) Delete(models ...*model.ProcessDefInfo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processDefInfoDo) withDO(do gen.Dao) *processDefInfoDo {
	p.DO = *do.(*gen.DO)
	return p
}
