// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newModelDetail(db *gorm.DB, opts ...gen.DOOption) modelDetail {
	_modelDetail := modelDetail{}

	_modelDetail.modelDetailDo.UseDB(db, opts...)
	_modelDetail.modelDetailDo.UseModel(&model.ModelDetail{})

	tableName := _modelDetail.modelDetailDo.TableName()
	_modelDetail.ALL = field.NewAsterisk(tableName)
	_modelDetail.ID = field.NewInt64(tableName, "id")
	_modelDetail.ModelID = field.NewString(tableName, "model_id")
	_modelDetail.ModelName = field.NewString(tableName, "model_name")
	_modelDetail.ModelTitle = field.NewString(tableName, "model_title")
	_modelDetail.ProcessDefID = field.NewString(tableName, "process_def_id")
	_modelDetail.FormDefID = field.NewString(tableName, "form_def_id")
	_modelDetail.ModelGroupID = field.NewString(tableName, "model_group_id")
	_modelDetail.Status = field.NewInt32(tableName, "status")
	_modelDetail.Remark = field.NewString(tableName, "remark")
	_modelDetail.CreateTime = field.NewTime(tableName, "create_time")
	_modelDetail.CreateUser = field.NewString(tableName, "create_user")
	_modelDetail.UpdateTime = field.NewTime(tableName, "update_time")
	_modelDetail.UpdateUser = field.NewString(tableName, "update_user")
	_modelDetail.NoticeURL = field.NewString(tableName, "notice_url")
	_modelDetail.TitleProps = field.NewString(tableName, "title_props")

	_modelDetail.fillFieldMap()

	return _modelDetail
}

type modelDetail struct {
	modelDetailDo modelDetailDo

	ALL          field.Asterisk
	ID           field.Int64  // 唯一id
	ModelID      field.String // 模板id
	ModelName    field.String // 模板名称
	ModelTitle   field.String // 模板标题
	ProcessDefID field.String // 流程定义id
	FormDefID    field.String // 表单定义id
	ModelGroupID field.String // 模版组id
	Status       field.Int32  // 模板状态【1：草稿；2：发布；3：停用】
	Remark       field.String // 描述
	CreateTime   field.Time   // 创建时间
	CreateUser   field.String // 创建人
	UpdateTime   field.Time   // 更新时间
	UpdateUser   field.String // 更新人
	NoticeURL    field.String // 回调通知推送url
	TitleProps   field.String // 标题配置

	fieldMap map[string]field.Expr
}

func (m modelDetail) Table(newTableName string) *modelDetail {
	m.modelDetailDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelDetail) As(alias string) *modelDetail {
	m.modelDetailDo.DO = *(m.modelDetailDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelDetail) updateTableName(table string) *modelDetail {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.ModelID = field.NewString(table, "model_id")
	m.ModelName = field.NewString(table, "model_name")
	m.ModelTitle = field.NewString(table, "model_title")
	m.ProcessDefID = field.NewString(table, "process_def_id")
	m.FormDefID = field.NewString(table, "form_def_id")
	m.ModelGroupID = field.NewString(table, "model_group_id")
	m.Status = field.NewInt32(table, "status")
	m.Remark = field.NewString(table, "remark")
	m.CreateTime = field.NewTime(table, "create_time")
	m.CreateUser = field.NewString(table, "create_user")
	m.UpdateTime = field.NewTime(table, "update_time")
	m.UpdateUser = field.NewString(table, "update_user")
	m.NoticeURL = field.NewString(table, "notice_url")
	m.TitleProps = field.NewString(table, "title_props")

	m.fillFieldMap()

	return m
}

func (m *modelDetail) WithContext(ctx context.Context) *modelDetailDo {
	return m.modelDetailDo.WithContext(ctx)
}

func (m modelDetail) TableName() string { return m.modelDetailDo.TableName() }

func (m modelDetail) Alias() string { return m.modelDetailDo.Alias() }

func (m *modelDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelDetail) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["id"] = m.ID
	m.fieldMap["model_id"] = m.ModelID
	m.fieldMap["model_name"] = m.ModelName
	m.fieldMap["model_title"] = m.ModelTitle
	m.fieldMap["process_def_id"] = m.ProcessDefID
	m.fieldMap["form_def_id"] = m.FormDefID
	m.fieldMap["model_group_id"] = m.ModelGroupID
	m.fieldMap["status"] = m.Status
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["create_user"] = m.CreateUser
	m.fieldMap["update_time"] = m.UpdateTime
	m.fieldMap["update_user"] = m.UpdateUser
	m.fieldMap["notice_url"] = m.NoticeURL
	m.fieldMap["title_props"] = m.TitleProps
}

func (m modelDetail) clone(db *gorm.DB) modelDetail {
	m.modelDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelDetail) replaceDB(db *gorm.DB) modelDetail {
	m.modelDetailDo.ReplaceDB(db)
	return m
}

type modelDetailDo struct{ gen.DO }

func (m modelDetailDo) Debug() *modelDetailDo {
	return m.withDO(m.DO.Debug())
}

func (m modelDetailDo) WithContext(ctx context.Context) *modelDetailDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelDetailDo) ReadDB() *modelDetailDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelDetailDo) WriteDB() *modelDetailDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelDetailDo) Session(config *gorm.Session) *modelDetailDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelDetailDo) Clauses(conds ...clause.Expression) *modelDetailDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelDetailDo) Returning(value interface{}, columns ...string) *modelDetailDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelDetailDo) Not(conds ...gen.Condition) *modelDetailDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelDetailDo) Or(conds ...gen.Condition) *modelDetailDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelDetailDo) Select(conds ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelDetailDo) Where(conds ...gen.Condition) *modelDetailDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *modelDetailDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m modelDetailDo) Order(conds ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelDetailDo) Distinct(cols ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelDetailDo) Omit(cols ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelDetailDo) Join(table schema.Tabler, on ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelDetailDo) Group(cols ...field.Expr) *modelDetailDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelDetailDo) Having(conds ...gen.Condition) *modelDetailDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelDetailDo) Limit(limit int) *modelDetailDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelDetailDo) Offset(offset int) *modelDetailDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *modelDetailDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelDetailDo) Unscoped() *modelDetailDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelDetailDo) Create(values ...*model.ModelDetail) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelDetailDo) CreateInBatches(values []*model.ModelDetail, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelDetailDo) Save(values ...*model.ModelDetail) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelDetailDo) First() (*model.ModelDetail, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelDetail), nil
	}
}

func (m modelDetailDo) Take() (*model.ModelDetail, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelDetail), nil
	}
}

func (m modelDetailDo) Last() (*model.ModelDetail, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelDetail), nil
	}
}

func (m modelDetailDo) Find() ([]*model.ModelDetail, error) {
	result, err := m.DO.Find()
	return result.([]*model.ModelDetail), err
}

func (m modelDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModelDetail, err error) {
	buf := make([]*model.ModelDetail, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelDetailDo) FindInBatches(result *[]*model.ModelDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelDetailDo) Attrs(attrs ...field.AssignExpr) *modelDetailDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelDetailDo) Assign(attrs ...field.AssignExpr) *modelDetailDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelDetailDo) Joins(fields ...field.RelationField) *modelDetailDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelDetailDo) Preload(fields ...field.RelationField) *modelDetailDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelDetailDo) FirstOrInit() (*model.ModelDetail, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelDetail), nil
	}
}

func (m modelDetailDo) FirstOrCreate() (*model.ModelDetail, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelDetail), nil
	}
}

func (m modelDetailDo) FindByPage(offset int, limit int) (result []*model.ModelDetail, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelDetailDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelDetailDo) Delete(models ...*model.ModelDetail) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelDetailDo) withDO(do gen.Dao) *modelDetailDo {
	m.DO = *do.(*gen.DO)
	return m
}
