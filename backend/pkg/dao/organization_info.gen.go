// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newOrganizationInfo(db *gorm.DB, opts ...gen.DOOption) organizationInfo {
	_organizationInfo := organizationInfo{}

	_organizationInfo.organizationInfoDo.UseDB(db, opts...)
	_organizationInfo.organizationInfoDo.UseModel(&model.OrganizationInfo{})

	tableName := _organizationInfo.organizationInfoDo.TableName()
	_organizationInfo.ALL = field.NewAsterisk(tableName)
	_organizationInfo.ID = field.NewInt64(tableName, "id")
	_organizationInfo.OrgID = field.NewString(tableName, "org_id")
	_organizationInfo.ParentID = field.NewString(tableName, "parent_id")
	_organizationInfo.OrgName = field.NewString(tableName, "org_name")
	_organizationInfo.Status = field.NewInt32(tableName, "status")
	_organizationInfo.Remark = field.NewString(tableName, "remark")
	_organizationInfo.CreateUser = field.NewString(tableName, "create_user")
	_organizationInfo.UpdateUser = field.NewString(tableName, "update_user")
	_organizationInfo.CreateTime = field.NewTime(tableName, "create_time")
	_organizationInfo.UpdateTime = field.NewTime(tableName, "update_time")

	_organizationInfo.fillFieldMap()

	return _organizationInfo
}

type organizationInfo struct {
	organizationInfoDo organizationInfoDo

	ALL        field.Asterisk
	ID         field.Int64  // 唯一id
	OrgID      field.String // 组id
	ParentID   field.String // 组父id
	OrgName    field.String // 组名称
	Status     field.Int32  // 状态【1：未启用；2：已启用；3：锁定；】
	Remark     field.String // 描述
	CreateUser field.String // 创建人
	UpdateUser field.String // 更新人
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (o organizationInfo) Table(newTableName string) *organizationInfo {
	o.organizationInfoDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o organizationInfo) As(alias string) *organizationInfo {
	o.organizationInfoDo.DO = *(o.organizationInfoDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *organizationInfo) updateTableName(table string) *organizationInfo {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrgID = field.NewString(table, "org_id")
	o.ParentID = field.NewString(table, "parent_id")
	o.OrgName = field.NewString(table, "org_name")
	o.Status = field.NewInt32(table, "status")
	o.Remark = field.NewString(table, "remark")
	o.CreateUser = field.NewString(table, "create_user")
	o.UpdateUser = field.NewString(table, "update_user")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")

	o.fillFieldMap()

	return o
}

func (o *organizationInfo) WithContext(ctx context.Context) *organizationInfoDo {
	return o.organizationInfoDo.WithContext(ctx)
}

func (o organizationInfo) TableName() string { return o.organizationInfoDo.TableName() }

func (o organizationInfo) Alias() string { return o.organizationInfoDo.Alias() }

func (o *organizationInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *organizationInfo) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["id"] = o.ID
	o.fieldMap["org_id"] = o.OrgID
	o.fieldMap["parent_id"] = o.ParentID
	o.fieldMap["org_name"] = o.OrgName
	o.fieldMap["status"] = o.Status
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["create_user"] = o.CreateUser
	o.fieldMap["update_user"] = o.UpdateUser
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
}

func (o organizationInfo) clone(db *gorm.DB) organizationInfo {
	o.organizationInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o organizationInfo) replaceDB(db *gorm.DB) organizationInfo {
	o.organizationInfoDo.ReplaceDB(db)
	return o
}

type organizationInfoDo struct{ gen.DO }

func (o organizationInfoDo) Debug() *organizationInfoDo {
	return o.withDO(o.DO.Debug())
}

func (o organizationInfoDo) WithContext(ctx context.Context) *organizationInfoDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o organizationInfoDo) ReadDB() *organizationInfoDo {
	return o.Clauses(dbresolver.Read)
}

func (o organizationInfoDo) WriteDB() *organizationInfoDo {
	return o.Clauses(dbresolver.Write)
}

func (o organizationInfoDo) Session(config *gorm.Session) *organizationInfoDo {
	return o.withDO(o.DO.Session(config))
}

func (o organizationInfoDo) Clauses(conds ...clause.Expression) *organizationInfoDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o organizationInfoDo) Returning(value interface{}, columns ...string) *organizationInfoDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o organizationInfoDo) Not(conds ...gen.Condition) *organizationInfoDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o organizationInfoDo) Or(conds ...gen.Condition) *organizationInfoDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o organizationInfoDo) Select(conds ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o organizationInfoDo) Where(conds ...gen.Condition) *organizationInfoDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o organizationInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *organizationInfoDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o organizationInfoDo) Order(conds ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o organizationInfoDo) Distinct(cols ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o organizationInfoDo) Omit(cols ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o organizationInfoDo) Join(table schema.Tabler, on ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o organizationInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o organizationInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o organizationInfoDo) Group(cols ...field.Expr) *organizationInfoDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o organizationInfoDo) Having(conds ...gen.Condition) *organizationInfoDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o organizationInfoDo) Limit(limit int) *organizationInfoDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o organizationInfoDo) Offset(offset int) *organizationInfoDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o organizationInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *organizationInfoDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o organizationInfoDo) Unscoped() *organizationInfoDo {
	return o.withDO(o.DO.Unscoped())
}

func (o organizationInfoDo) Create(values ...*model.OrganizationInfo) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o organizationInfoDo) CreateInBatches(values []*model.OrganizationInfo, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o organizationInfoDo) Save(values ...*model.OrganizationInfo) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o organizationInfoDo) First() (*model.OrganizationInfo, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationInfo), nil
	}
}

func (o organizationInfoDo) Take() (*model.OrganizationInfo, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationInfo), nil
	}
}

func (o organizationInfoDo) Last() (*model.OrganizationInfo, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationInfo), nil
	}
}

func (o organizationInfoDo) Find() ([]*model.OrganizationInfo, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrganizationInfo), err
}

func (o organizationInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationInfo, err error) {
	buf := make([]*model.OrganizationInfo, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o organizationInfoDo) FindInBatches(result *[]*model.OrganizationInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o organizationInfoDo) Attrs(attrs ...field.AssignExpr) *organizationInfoDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o organizationInfoDo) Assign(attrs ...field.AssignExpr) *organizationInfoDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o organizationInfoDo) Joins(fields ...field.RelationField) *organizationInfoDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o organizationInfoDo) Preload(fields ...field.RelationField) *organizationInfoDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o organizationInfoDo) FirstOrInit() (*model.OrganizationInfo, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationInfo), nil
	}
}

func (o organizationInfoDo) FirstOrCreate() (*model.OrganizationInfo, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationInfo), nil
	}
}

func (o organizationInfoDo) FindByPage(offset int, limit int) (result []*model.OrganizationInfo, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o organizationInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o organizationInfoDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o organizationInfoDo) Delete(models ...*model.OrganizationInfo) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *organizationInfoDo) withDO(do gen.Dao) *organizationInfoDo {
	o.DO = *do.(*gen.DO)
	return o
}
