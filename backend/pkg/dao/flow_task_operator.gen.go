// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newFlowTaskOperator(db *gorm.DB, opts ...gen.DOOption) flowTaskOperator {
	_flowTaskOperator := flowTaskOperator{}

	_flowTaskOperator.flowTaskOperatorDo.UseDB(db, opts...)
	_flowTaskOperator.flowTaskOperatorDo.UseModel(&model.FlowTaskOperator{})

	tableName := _flowTaskOperator.flowTaskOperatorDo.TableName()
	_flowTaskOperator.ALL = field.NewAsterisk(tableName)
	_flowTaskOperator.ID = field.NewInt32(tableName, "id")
	_flowTaskOperator.Name = field.NewString(tableName, "name")
	_flowTaskOperator.FlowInstID = field.NewString(tableName, "flow_inst_id")
	_flowTaskOperator.FlowInstTaskID = field.NewString(tableName, "flow_inst_task_id")
	_flowTaskOperator.TaskOperatorID = field.NewString(tableName, "task_operator_id")
	_flowTaskOperator.UserID = field.NewString(tableName, "user_id")
	_flowTaskOperator.State = field.NewInt32(tableName, "state")
	_flowTaskOperator.CreateTime = field.NewTime(tableName, "create_time")
	_flowTaskOperator.CreateUser = field.NewString(tableName, "create_user")
	_flowTaskOperator.UpdateTime = field.NewTime(tableName, "update_time")
	_flowTaskOperator.UpdateUser = field.NewString(tableName, "update_user")

	_flowTaskOperator.fillFieldMap()

	return _flowTaskOperator
}

type flowTaskOperator struct {
	flowTaskOperatorDo flowTaskOperatorDo

	ALL            field.Asterisk
	ID             field.Int32  // 主键
	Name           field.String // 流程实例任务名称
	FlowInstID     field.String // 流程实例id
	FlowInstTaskID field.String // 流程实例任务id
	TaskOperatorID field.String // 任务id
	UserID         field.String // 用户id
	State          field.Int32  // 状态
	CreateTime     field.Time   // 创建时间
	CreateUser     field.String // 创建人
	UpdateTime     field.Time   // 更新时间
	UpdateUser     field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f flowTaskOperator) Table(newTableName string) *flowTaskOperator {
	f.flowTaskOperatorDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowTaskOperator) As(alias string) *flowTaskOperator {
	f.flowTaskOperatorDo.DO = *(f.flowTaskOperatorDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowTaskOperator) updateTableName(table string) *flowTaskOperator {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.FlowInstID = field.NewString(table, "flow_inst_id")
	f.FlowInstTaskID = field.NewString(table, "flow_inst_task_id")
	f.TaskOperatorID = field.NewString(table, "task_operator_id")
	f.UserID = field.NewString(table, "user_id")
	f.State = field.NewInt32(table, "state")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *flowTaskOperator) WithContext(ctx context.Context) *flowTaskOperatorDo {
	return f.flowTaskOperatorDo.WithContext(ctx)
}

func (f flowTaskOperator) TableName() string { return f.flowTaskOperatorDo.TableName() }

func (f flowTaskOperator) Alias() string { return f.flowTaskOperatorDo.Alias() }

func (f *flowTaskOperator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowTaskOperator) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["flow_inst_id"] = f.FlowInstID
	f.fieldMap["flow_inst_task_id"] = f.FlowInstTaskID
	f.fieldMap["task_operator_id"] = f.TaskOperatorID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["state"] = f.State
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f flowTaskOperator) clone(db *gorm.DB) flowTaskOperator {
	f.flowTaskOperatorDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowTaskOperator) replaceDB(db *gorm.DB) flowTaskOperator {
	f.flowTaskOperatorDo.ReplaceDB(db)
	return f
}

type flowTaskOperatorDo struct{ gen.DO }

func (f flowTaskOperatorDo) Debug() *flowTaskOperatorDo {
	return f.withDO(f.DO.Debug())
}

func (f flowTaskOperatorDo) WithContext(ctx context.Context) *flowTaskOperatorDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowTaskOperatorDo) ReadDB() *flowTaskOperatorDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowTaskOperatorDo) WriteDB() *flowTaskOperatorDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowTaskOperatorDo) Session(config *gorm.Session) *flowTaskOperatorDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowTaskOperatorDo) Clauses(conds ...clause.Expression) *flowTaskOperatorDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowTaskOperatorDo) Returning(value interface{}, columns ...string) *flowTaskOperatorDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowTaskOperatorDo) Not(conds ...gen.Condition) *flowTaskOperatorDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowTaskOperatorDo) Or(conds ...gen.Condition) *flowTaskOperatorDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowTaskOperatorDo) Select(conds ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowTaskOperatorDo) Where(conds ...gen.Condition) *flowTaskOperatorDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowTaskOperatorDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *flowTaskOperatorDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f flowTaskOperatorDo) Order(conds ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowTaskOperatorDo) Distinct(cols ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowTaskOperatorDo) Omit(cols ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowTaskOperatorDo) Join(table schema.Tabler, on ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowTaskOperatorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowTaskOperatorDo) RightJoin(table schema.Tabler, on ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowTaskOperatorDo) Group(cols ...field.Expr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowTaskOperatorDo) Having(conds ...gen.Condition) *flowTaskOperatorDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowTaskOperatorDo) Limit(limit int) *flowTaskOperatorDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowTaskOperatorDo) Offset(offset int) *flowTaskOperatorDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowTaskOperatorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *flowTaskOperatorDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowTaskOperatorDo) Unscoped() *flowTaskOperatorDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowTaskOperatorDo) Create(values ...*model.FlowTaskOperator) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowTaskOperatorDo) CreateInBatches(values []*model.FlowTaskOperator, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowTaskOperatorDo) Save(values ...*model.FlowTaskOperator) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowTaskOperatorDo) First() (*model.FlowTaskOperator, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowTaskOperator), nil
	}
}

func (f flowTaskOperatorDo) Take() (*model.FlowTaskOperator, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowTaskOperator), nil
	}
}

func (f flowTaskOperatorDo) Last() (*model.FlowTaskOperator, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowTaskOperator), nil
	}
}

func (f flowTaskOperatorDo) Find() ([]*model.FlowTaskOperator, error) {
	result, err := f.DO.Find()
	return result.([]*model.FlowTaskOperator), err
}

func (f flowTaskOperatorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowTaskOperator, err error) {
	buf := make([]*model.FlowTaskOperator, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowTaskOperatorDo) FindInBatches(result *[]*model.FlowTaskOperator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowTaskOperatorDo) Attrs(attrs ...field.AssignExpr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowTaskOperatorDo) Assign(attrs ...field.AssignExpr) *flowTaskOperatorDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowTaskOperatorDo) Joins(fields ...field.RelationField) *flowTaskOperatorDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowTaskOperatorDo) Preload(fields ...field.RelationField) *flowTaskOperatorDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowTaskOperatorDo) FirstOrInit() (*model.FlowTaskOperator, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowTaskOperator), nil
	}
}

func (f flowTaskOperatorDo) FirstOrCreate() (*model.FlowTaskOperator, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowTaskOperator), nil
	}
}

func (f flowTaskOperatorDo) FindByPage(offset int, limit int) (result []*model.FlowTaskOperator, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowTaskOperatorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowTaskOperatorDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowTaskOperatorDo) Delete(models ...*model.FlowTaskOperator) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowTaskOperatorDo) withDO(do gen.Dao) *flowTaskOperatorDo {
	f.DO = *do.(*gen.DO)
	return f
}
