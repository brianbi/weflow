// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newFlowDefInfo(db *gorm.DB, opts ...gen.DOOption) flowDefInfo {
	_flowDefInfo := flowDefInfo{}

	_flowDefInfo.flowDefInfoDo.UseDB(db, opts...)
	_flowDefInfo.flowDefInfoDo.UseModel(&model.FlowDefInfo{})

	tableName := _flowDefInfo.flowDefInfoDo.TableName()
	_flowDefInfo.ALL = field.NewAsterisk(tableName)
	_flowDefInfo.ID = field.NewInt64(tableName, "id")
	_flowDefInfo.FlowDefID = field.NewString(tableName, "flow_def_id")
	_flowDefInfo.FlowDefName = field.NewString(tableName, "flow_def_name")
	_flowDefInfo.Status = field.NewInt32(tableName, "status")
	_flowDefInfo.Remark = field.NewString(tableName, "remark")
	_flowDefInfo.StructData = field.NewString(tableName, "struct_data")
	_flowDefInfo.CreateTime = field.NewTime(tableName, "create_time")
	_flowDefInfo.CreateUser = field.NewString(tableName, "create_user")
	_flowDefInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_flowDefInfo.UpdateUser = field.NewString(tableName, "update_user")

	_flowDefInfo.fillFieldMap()

	return _flowDefInfo
}

type flowDefInfo struct {
	flowDefInfoDo flowDefInfoDo

	ALL         field.Asterisk
	ID          field.Int64  // 唯一id
	FlowDefID   field.String // 流程定义id
	FlowDefName field.String // 流程定义名称
	Status      field.Int32  // 状态【1：草稿；2：发布可用；3：停用】
	Remark      field.String // 描述
	StructData  field.String // 流程结构化数据
	CreateTime  field.Time   // 创建时间
	CreateUser  field.String // 创建人
	UpdateTime  field.Time   // 更新时间
	UpdateUser  field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f flowDefInfo) Table(newTableName string) *flowDefInfo {
	f.flowDefInfoDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowDefInfo) As(alias string) *flowDefInfo {
	f.flowDefInfoDo.DO = *(f.flowDefInfoDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowDefInfo) updateTableName(table string) *flowDefInfo {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FlowDefID = field.NewString(table, "flow_def_id")
	f.FlowDefName = field.NewString(table, "flow_def_name")
	f.Status = field.NewInt32(table, "status")
	f.Remark = field.NewString(table, "remark")
	f.StructData = field.NewString(table, "struct_data")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *flowDefInfo) WithContext(ctx context.Context) *flowDefInfoDo {
	return f.flowDefInfoDo.WithContext(ctx)
}

func (f flowDefInfo) TableName() string { return f.flowDefInfoDo.TableName() }

func (f flowDefInfo) Alias() string { return f.flowDefInfoDo.Alias() }

func (f *flowDefInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowDefInfo) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["flow_def_id"] = f.FlowDefID
	f.fieldMap["flow_def_name"] = f.FlowDefName
	f.fieldMap["status"] = f.Status
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["struct_data"] = f.StructData
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f flowDefInfo) clone(db *gorm.DB) flowDefInfo {
	f.flowDefInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowDefInfo) replaceDB(db *gorm.DB) flowDefInfo {
	f.flowDefInfoDo.ReplaceDB(db)
	return f
}

type flowDefInfoDo struct{ gen.DO }

func (f flowDefInfoDo) Debug() *flowDefInfoDo {
	return f.withDO(f.DO.Debug())
}

func (f flowDefInfoDo) WithContext(ctx context.Context) *flowDefInfoDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowDefInfoDo) ReadDB() *flowDefInfoDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowDefInfoDo) WriteDB() *flowDefInfoDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowDefInfoDo) Session(config *gorm.Session) *flowDefInfoDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowDefInfoDo) Clauses(conds ...clause.Expression) *flowDefInfoDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowDefInfoDo) Returning(value interface{}, columns ...string) *flowDefInfoDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowDefInfoDo) Not(conds ...gen.Condition) *flowDefInfoDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowDefInfoDo) Or(conds ...gen.Condition) *flowDefInfoDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowDefInfoDo) Select(conds ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowDefInfoDo) Where(conds ...gen.Condition) *flowDefInfoDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowDefInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *flowDefInfoDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f flowDefInfoDo) Order(conds ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowDefInfoDo) Distinct(cols ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowDefInfoDo) Omit(cols ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowDefInfoDo) Join(table schema.Tabler, on ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowDefInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowDefInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowDefInfoDo) Group(cols ...field.Expr) *flowDefInfoDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowDefInfoDo) Having(conds ...gen.Condition) *flowDefInfoDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowDefInfoDo) Limit(limit int) *flowDefInfoDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowDefInfoDo) Offset(offset int) *flowDefInfoDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowDefInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *flowDefInfoDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowDefInfoDo) Unscoped() *flowDefInfoDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowDefInfoDo) Create(values ...*model.FlowDefInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowDefInfoDo) CreateInBatches(values []*model.FlowDefInfo, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowDefInfoDo) Save(values ...*model.FlowDefInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowDefInfoDo) First() (*model.FlowDefInfo, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefInfo), nil
	}
}

func (f flowDefInfoDo) Take() (*model.FlowDefInfo, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefInfo), nil
	}
}

func (f flowDefInfoDo) Last() (*model.FlowDefInfo, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefInfo), nil
	}
}

func (f flowDefInfoDo) Find() ([]*model.FlowDefInfo, error) {
	result, err := f.DO.Find()
	return result.([]*model.FlowDefInfo), err
}

func (f flowDefInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowDefInfo, err error) {
	buf := make([]*model.FlowDefInfo, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowDefInfoDo) FindInBatches(result *[]*model.FlowDefInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowDefInfoDo) Attrs(attrs ...field.AssignExpr) *flowDefInfoDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowDefInfoDo) Assign(attrs ...field.AssignExpr) *flowDefInfoDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowDefInfoDo) Joins(fields ...field.RelationField) *flowDefInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowDefInfoDo) Preload(fields ...field.RelationField) *flowDefInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowDefInfoDo) FirstOrInit() (*model.FlowDefInfo, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefInfo), nil
	}
}

func (f flowDefInfoDo) FirstOrCreate() (*model.FlowDefInfo, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefInfo), nil
	}
}

func (f flowDefInfoDo) FindByPage(offset int, limit int) (result []*model.FlowDefInfo, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowDefInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowDefInfoDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowDefInfoDo) Delete(models ...*model.FlowDefInfo) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowDefInfoDo) withDO(do gen.Dao) *flowDefInfoDo {
	f.DO = *do.(*gen.DO)
	return f
}
