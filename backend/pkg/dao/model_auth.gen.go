// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newModelAuth(db *gorm.DB, opts ...gen.DOOption) modelAuth {
	_modelAuth := modelAuth{}

	_modelAuth.modelAuthDo.UseDB(db, opts...)
	_modelAuth.modelAuthDo.UseModel(&model.ModelAuth{})

	tableName := _modelAuth.modelAuthDo.TableName()
	_modelAuth.ALL = field.NewAsterisk(tableName)
	_modelAuth.ID = field.NewInt64(tableName, "id")
	_modelAuth.ModelID = field.NewString(tableName, "model_id")
	_modelAuth.AuthObjType = field.NewInt32(tableName, "auth_obj_type")
	_modelAuth.ObjID = field.NewString(tableName, "obj_id")
	_modelAuth.CreateTime = field.NewTime(tableName, "create_time")
	_modelAuth.CreateUser = field.NewString(tableName, "create_user")
	_modelAuth.UpdateTime = field.NewTime(tableName, "update_time")
	_modelAuth.UpdateUser = field.NewString(tableName, "update_user")

	_modelAuth.fillFieldMap()

	return _modelAuth
}

type modelAuth struct {
	modelAuthDo modelAuthDo

	ALL         field.Asterisk
	ID          field.Int64  // 唯一id
	ModelID     field.String // 模板id
	AuthObjType field.Int32  // 授权对象类型【1：操作员；2：部门（包含子部门）；3：部门（不含子部门）】
	ObjID       field.String // 授权对象id;根据授权对象类型取值
	CreateTime  field.Time   // 创建时间
	CreateUser  field.String // 创建人
	UpdateTime  field.Time   // 更新时间
	UpdateUser  field.String // 更新人

	fieldMap map[string]field.Expr
}

func (m modelAuth) Table(newTableName string) *modelAuth {
	m.modelAuthDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelAuth) As(alias string) *modelAuth {
	m.modelAuthDo.DO = *(m.modelAuthDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelAuth) updateTableName(table string) *modelAuth {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.ModelID = field.NewString(table, "model_id")
	m.AuthObjType = field.NewInt32(table, "auth_obj_type")
	m.ObjID = field.NewString(table, "obj_id")
	m.CreateTime = field.NewTime(table, "create_time")
	m.CreateUser = field.NewString(table, "create_user")
	m.UpdateTime = field.NewTime(table, "update_time")
	m.UpdateUser = field.NewString(table, "update_user")

	m.fillFieldMap()

	return m
}

func (m *modelAuth) WithContext(ctx context.Context) *modelAuthDo {
	return m.modelAuthDo.WithContext(ctx)
}

func (m modelAuth) TableName() string { return m.modelAuthDo.TableName() }

func (m modelAuth) Alias() string { return m.modelAuthDo.Alias() }

func (m *modelAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelAuth) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["model_id"] = m.ModelID
	m.fieldMap["auth_obj_type"] = m.AuthObjType
	m.fieldMap["obj_id"] = m.ObjID
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["create_user"] = m.CreateUser
	m.fieldMap["update_time"] = m.UpdateTime
	m.fieldMap["update_user"] = m.UpdateUser
}

func (m modelAuth) clone(db *gorm.DB) modelAuth {
	m.modelAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelAuth) replaceDB(db *gorm.DB) modelAuth {
	m.modelAuthDo.ReplaceDB(db)
	return m
}

type modelAuthDo struct{ gen.DO }

func (m modelAuthDo) Debug() *modelAuthDo {
	return m.withDO(m.DO.Debug())
}

func (m modelAuthDo) WithContext(ctx context.Context) *modelAuthDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelAuthDo) ReadDB() *modelAuthDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelAuthDo) WriteDB() *modelAuthDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelAuthDo) Session(config *gorm.Session) *modelAuthDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelAuthDo) Clauses(conds ...clause.Expression) *modelAuthDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelAuthDo) Returning(value interface{}, columns ...string) *modelAuthDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelAuthDo) Not(conds ...gen.Condition) *modelAuthDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelAuthDo) Or(conds ...gen.Condition) *modelAuthDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelAuthDo) Select(conds ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelAuthDo) Where(conds ...gen.Condition) *modelAuthDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelAuthDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *modelAuthDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m modelAuthDo) Order(conds ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelAuthDo) Distinct(cols ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelAuthDo) Omit(cols ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelAuthDo) Join(table schema.Tabler, on ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelAuthDo) Group(cols ...field.Expr) *modelAuthDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelAuthDo) Having(conds ...gen.Condition) *modelAuthDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelAuthDo) Limit(limit int) *modelAuthDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelAuthDo) Offset(offset int) *modelAuthDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *modelAuthDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelAuthDo) Unscoped() *modelAuthDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelAuthDo) Create(values ...*model.ModelAuth) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelAuthDo) CreateInBatches(values []*model.ModelAuth, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelAuthDo) Save(values ...*model.ModelAuth) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelAuthDo) First() (*model.ModelAuth, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelAuth), nil
	}
}

func (m modelAuthDo) Take() (*model.ModelAuth, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelAuth), nil
	}
}

func (m modelAuthDo) Last() (*model.ModelAuth, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelAuth), nil
	}
}

func (m modelAuthDo) Find() ([]*model.ModelAuth, error) {
	result, err := m.DO.Find()
	return result.([]*model.ModelAuth), err
}

func (m modelAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModelAuth, err error) {
	buf := make([]*model.ModelAuth, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelAuthDo) FindInBatches(result *[]*model.ModelAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelAuthDo) Attrs(attrs ...field.AssignExpr) *modelAuthDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelAuthDo) Assign(attrs ...field.AssignExpr) *modelAuthDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelAuthDo) Joins(fields ...field.RelationField) *modelAuthDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelAuthDo) Preload(fields ...field.RelationField) *modelAuthDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelAuthDo) FirstOrInit() (*model.ModelAuth, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelAuth), nil
	}
}

func (m modelAuthDo) FirstOrCreate() (*model.ModelAuth, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelAuth), nil
	}
}

func (m modelAuthDo) FindByPage(offset int, limit int) (result []*model.ModelAuth, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelAuthDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelAuthDo) Delete(models ...*model.ModelAuth) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelAuthDo) withDO(do gen.Dao) *modelAuthDo {
	m.DO = *do.(*gen.DO)
	return m
}
