// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newInstUserTask(db *gorm.DB, opts ...gen.DOOption) instUserTask {
	_instUserTask := instUserTask{}

	_instUserTask.instUserTaskDo.UseDB(db, opts...)
	_instUserTask.instUserTaskDo.UseModel(&model.InstUserTask{})

	tableName := _instUserTask.instUserTaskDo.TableName()
	_instUserTask.ALL = field.NewAsterisk(tableName)
	_instUserTask.ID = field.NewInt64(tableName, "id")
	_instUserTask.InstTaskID = field.NewString(tableName, "inst_task_id")
	_instUserTask.NodeTaskID = field.NewString(tableName, "node_task_id")
	_instUserTask.NodeID = field.NewString(tableName, "node_id")
	_instUserTask.UserTaskID = field.NewString(tableName, "user_task_id")
	_instUserTask.Type = field.NewInt32(tableName, "type")
	_instUserTask.Strategy = field.NewInt32(tableName, "strategy")
	_instUserTask.NodeUserName = field.NewString(tableName, "node_user_name")
	_instUserTask.NodeUserID = field.NewString(tableName, "node_user_id")
	_instUserTask.Sort = field.NewInt32(tableName, "sort")
	_instUserTask.Obj = field.NewString(tableName, "obj")
	_instUserTask.Relative = field.NewString(tableName, "relative")
	_instUserTask.Status = field.NewInt32(tableName, "status")
	_instUserTask.CreateTime = field.NewTime(tableName, "create_time")
	_instUserTask.UpdateTime = field.NewTime(tableName, "update_time")
	_instUserTask.HandleTime = field.NewTime(tableName, "handle_time")
	_instUserTask.OpUserID = field.NewString(tableName, "op_user_id")
	_instUserTask.OpUserName = field.NewString(tableName, "op_user_name")
	_instUserTask.Opinion = field.NewInt32(tableName, "opinion")
	_instUserTask.OpinionDesc = field.NewString(tableName, "opinion_desc")

	_instUserTask.fillFieldMap()

	return _instUserTask
}

type instUserTask struct {
	instUserTaskDo instUserTaskDo

	ALL          field.Asterisk
	ID           field.Int64  // 唯一id
	InstTaskID   field.String // 实例任务id
	NodeTaskID   field.String // 节点任务id
	NodeID       field.String // 节点任务id
	UserTaskID   field.String // 处理人任务id
	Type         field.Int32  // 常用审批人【指定成员：1；发起人自己：2；发起人自选：3：角色：4；部门：5】主管（相对岗位）【直属主管：1；部门主管：2；连续多级主管：3；部门控件对应主管：4】其他【表单人员控件：1；部门控件：2；角色控件：3】
	Strategy     field.Int32  // 处理人策略【常用审批人：1；主管（相对岗位）：2；其他：3】
	NodeUserName field.String // 处理人名称
	NodeUserID   field.String // 处理人id
	Sort         field.Int32  // 处理人顺序;正序排序
	Obj          field.String // 扩展字段，设计中可忽略
	Relative     field.String // 相对发起人的直属主管，设计中可忽略
	Status       field.Int32  // 任务状态【1：处理中；2：完成；3：回退；4：终止；5：不通过】
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	HandleTime   field.Time   // 处理时间
	OpUserID     field.String // 操作用户id
	OpUserName   field.String // 操作用户名称
	Opinion      field.Int32  // 任务处理意见【1：未发表；2：已阅；3：同意；4：不同意】
	OpinionDesc  field.String // 处理意见描述

	fieldMap map[string]field.Expr
}

func (i instUserTask) Table(newTableName string) *instUserTask {
	i.instUserTaskDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i instUserTask) As(alias string) *instUserTask {
	i.instUserTaskDo.DO = *(i.instUserTaskDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *instUserTask) updateTableName(table string) *instUserTask {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.InstTaskID = field.NewString(table, "inst_task_id")
	i.NodeTaskID = field.NewString(table, "node_task_id")
	i.NodeID = field.NewString(table, "node_id")
	i.UserTaskID = field.NewString(table, "user_task_id")
	i.Type = field.NewInt32(table, "type")
	i.Strategy = field.NewInt32(table, "strategy")
	i.NodeUserName = field.NewString(table, "node_user_name")
	i.NodeUserID = field.NewString(table, "node_user_id")
	i.Sort = field.NewInt32(table, "sort")
	i.Obj = field.NewString(table, "obj")
	i.Relative = field.NewString(table, "relative")
	i.Status = field.NewInt32(table, "status")
	i.CreateTime = field.NewTime(table, "create_time")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.HandleTime = field.NewTime(table, "handle_time")
	i.OpUserID = field.NewString(table, "op_user_id")
	i.OpUserName = field.NewString(table, "op_user_name")
	i.Opinion = field.NewInt32(table, "opinion")
	i.OpinionDesc = field.NewString(table, "opinion_desc")

	i.fillFieldMap()

	return i
}

func (i *instUserTask) WithContext(ctx context.Context) *instUserTaskDo {
	return i.instUserTaskDo.WithContext(ctx)
}

func (i instUserTask) TableName() string { return i.instUserTaskDo.TableName() }

func (i instUserTask) Alias() string { return i.instUserTaskDo.Alias() }

func (i *instUserTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *instUserTask) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 20)
	i.fieldMap["id"] = i.ID
	i.fieldMap["inst_task_id"] = i.InstTaskID
	i.fieldMap["node_task_id"] = i.NodeTaskID
	i.fieldMap["node_id"] = i.NodeID
	i.fieldMap["user_task_id"] = i.UserTaskID
	i.fieldMap["type"] = i.Type
	i.fieldMap["strategy"] = i.Strategy
	i.fieldMap["node_user_name"] = i.NodeUserName
	i.fieldMap["node_user_id"] = i.NodeUserID
	i.fieldMap["sort"] = i.Sort
	i.fieldMap["obj"] = i.Obj
	i.fieldMap["relative"] = i.Relative
	i.fieldMap["status"] = i.Status
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["handle_time"] = i.HandleTime
	i.fieldMap["op_user_id"] = i.OpUserID
	i.fieldMap["op_user_name"] = i.OpUserName
	i.fieldMap["opinion"] = i.Opinion
	i.fieldMap["opinion_desc"] = i.OpinionDesc
}

func (i instUserTask) clone(db *gorm.DB) instUserTask {
	i.instUserTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i instUserTask) replaceDB(db *gorm.DB) instUserTask {
	i.instUserTaskDo.ReplaceDB(db)
	return i
}

type instUserTaskDo struct{ gen.DO }

func (i instUserTaskDo) Debug() *instUserTaskDo {
	return i.withDO(i.DO.Debug())
}

func (i instUserTaskDo) WithContext(ctx context.Context) *instUserTaskDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i instUserTaskDo) ReadDB() *instUserTaskDo {
	return i.Clauses(dbresolver.Read)
}

func (i instUserTaskDo) WriteDB() *instUserTaskDo {
	return i.Clauses(dbresolver.Write)
}

func (i instUserTaskDo) Session(config *gorm.Session) *instUserTaskDo {
	return i.withDO(i.DO.Session(config))
}

func (i instUserTaskDo) Clauses(conds ...clause.Expression) *instUserTaskDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i instUserTaskDo) Returning(value interface{}, columns ...string) *instUserTaskDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i instUserTaskDo) Not(conds ...gen.Condition) *instUserTaskDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i instUserTaskDo) Or(conds ...gen.Condition) *instUserTaskDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i instUserTaskDo) Select(conds ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i instUserTaskDo) Where(conds ...gen.Condition) *instUserTaskDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i instUserTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *instUserTaskDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i instUserTaskDo) Order(conds ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i instUserTaskDo) Distinct(cols ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i instUserTaskDo) Omit(cols ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i instUserTaskDo) Join(table schema.Tabler, on ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i instUserTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i instUserTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i instUserTaskDo) Group(cols ...field.Expr) *instUserTaskDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i instUserTaskDo) Having(conds ...gen.Condition) *instUserTaskDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i instUserTaskDo) Limit(limit int) *instUserTaskDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i instUserTaskDo) Offset(offset int) *instUserTaskDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i instUserTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *instUserTaskDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i instUserTaskDo) Unscoped() *instUserTaskDo {
	return i.withDO(i.DO.Unscoped())
}

func (i instUserTaskDo) Create(values ...*model.InstUserTask) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i instUserTaskDo) CreateInBatches(values []*model.InstUserTask, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i instUserTaskDo) Save(values ...*model.InstUserTask) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i instUserTaskDo) First() (*model.InstUserTask, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTask), nil
	}
}

func (i instUserTaskDo) Take() (*model.InstUserTask, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTask), nil
	}
}

func (i instUserTaskDo) Last() (*model.InstUserTask, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTask), nil
	}
}

func (i instUserTaskDo) Find() ([]*model.InstUserTask, error) {
	result, err := i.DO.Find()
	return result.([]*model.InstUserTask), err
}

func (i instUserTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstUserTask, err error) {
	buf := make([]*model.InstUserTask, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i instUserTaskDo) FindInBatches(result *[]*model.InstUserTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i instUserTaskDo) Attrs(attrs ...field.AssignExpr) *instUserTaskDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i instUserTaskDo) Assign(attrs ...field.AssignExpr) *instUserTaskDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i instUserTaskDo) Joins(fields ...field.RelationField) *instUserTaskDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i instUserTaskDo) Preload(fields ...field.RelationField) *instUserTaskDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i instUserTaskDo) FirstOrInit() (*model.InstUserTask, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTask), nil
	}
}

func (i instUserTaskDo) FirstOrCreate() (*model.InstUserTask, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstUserTask), nil
	}
}

func (i instUserTaskDo) FindByPage(offset int, limit int) (result []*model.InstUserTask, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i instUserTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i instUserTaskDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i instUserTaskDo) Delete(models ...*model.InstUserTask) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *instUserTaskDo) withDO(do gen.Dao) *instUserTaskDo {
	i.DO = *do.(*gen.DO)
	return i
}
