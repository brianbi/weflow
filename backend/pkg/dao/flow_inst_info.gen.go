// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newFlowInstInfo(db *gorm.DB, opts ...gen.DOOption) flowInstInfo {
	_flowInstInfo := flowInstInfo{}

	_flowInstInfo.flowInstInfoDo.UseDB(db, opts...)
	_flowInstInfo.flowInstInfoDo.UseModel(&model.FlowInstInfo{})

	tableName := _flowInstInfo.flowInstInfoDo.TableName()
	_flowInstInfo.ALL = field.NewAsterisk(tableName)
	_flowInstInfo.ID = field.NewInt32(tableName, "id")
	_flowInstInfo.Name = field.NewString(tableName, "name")
	_flowInstInfo.FlowInstID = field.NewString(tableName, "flow_inst_id")
	_flowInstInfo.State = field.NewInt32(tableName, "state")
	_flowInstInfo.CreateTime = field.NewTime(tableName, "create_time")
	_flowInstInfo.CreateUser = field.NewString(tableName, "create_user")
	_flowInstInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_flowInstInfo.UpdateUser = field.NewString(tableName, "update_user")

	_flowInstInfo.fillFieldMap()

	return _flowInstInfo
}

type flowInstInfo struct {
	flowInstInfoDo flowInstInfoDo

	ALL        field.Asterisk
	ID         field.Int32  // 主键
	Name       field.String // 流程实例名称
	FlowInstID field.String // 流程实例id
	State      field.Int32  // 状态
	CreateTime field.Time   // 创建时间
	CreateUser field.String // 创建人
	UpdateTime field.Time   // 更新时间
	UpdateUser field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f flowInstInfo) Table(newTableName string) *flowInstInfo {
	f.flowInstInfoDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowInstInfo) As(alias string) *flowInstInfo {
	f.flowInstInfoDo.DO = *(f.flowInstInfoDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowInstInfo) updateTableName(table string) *flowInstInfo {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.FlowInstID = field.NewString(table, "flow_inst_id")
	f.State = field.NewInt32(table, "state")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *flowInstInfo) WithContext(ctx context.Context) *flowInstInfoDo {
	return f.flowInstInfoDo.WithContext(ctx)
}

func (f flowInstInfo) TableName() string { return f.flowInstInfoDo.TableName() }

func (f flowInstInfo) Alias() string { return f.flowInstInfoDo.Alias() }

func (f *flowInstInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowInstInfo) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["flow_inst_id"] = f.FlowInstID
	f.fieldMap["state"] = f.State
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f flowInstInfo) clone(db *gorm.DB) flowInstInfo {
	f.flowInstInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowInstInfo) replaceDB(db *gorm.DB) flowInstInfo {
	f.flowInstInfoDo.ReplaceDB(db)
	return f
}

type flowInstInfoDo struct{ gen.DO }

func (f flowInstInfoDo) Debug() *flowInstInfoDo {
	return f.withDO(f.DO.Debug())
}

func (f flowInstInfoDo) WithContext(ctx context.Context) *flowInstInfoDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowInstInfoDo) ReadDB() *flowInstInfoDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowInstInfoDo) WriteDB() *flowInstInfoDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowInstInfoDo) Session(config *gorm.Session) *flowInstInfoDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowInstInfoDo) Clauses(conds ...clause.Expression) *flowInstInfoDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowInstInfoDo) Returning(value interface{}, columns ...string) *flowInstInfoDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowInstInfoDo) Not(conds ...gen.Condition) *flowInstInfoDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowInstInfoDo) Or(conds ...gen.Condition) *flowInstInfoDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowInstInfoDo) Select(conds ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowInstInfoDo) Where(conds ...gen.Condition) *flowInstInfoDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowInstInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *flowInstInfoDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f flowInstInfoDo) Order(conds ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowInstInfoDo) Distinct(cols ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowInstInfoDo) Omit(cols ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowInstInfoDo) Join(table schema.Tabler, on ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowInstInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowInstInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowInstInfoDo) Group(cols ...field.Expr) *flowInstInfoDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowInstInfoDo) Having(conds ...gen.Condition) *flowInstInfoDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowInstInfoDo) Limit(limit int) *flowInstInfoDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowInstInfoDo) Offset(offset int) *flowInstInfoDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowInstInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *flowInstInfoDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowInstInfoDo) Unscoped() *flowInstInfoDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowInstInfoDo) Create(values ...*model.FlowInstInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowInstInfoDo) CreateInBatches(values []*model.FlowInstInfo, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowInstInfoDo) Save(values ...*model.FlowInstInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowInstInfoDo) First() (*model.FlowInstInfo, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowInstInfo), nil
	}
}

func (f flowInstInfoDo) Take() (*model.FlowInstInfo, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowInstInfo), nil
	}
}

func (f flowInstInfoDo) Last() (*model.FlowInstInfo, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowInstInfo), nil
	}
}

func (f flowInstInfoDo) Find() ([]*model.FlowInstInfo, error) {
	result, err := f.DO.Find()
	return result.([]*model.FlowInstInfo), err
}

func (f flowInstInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowInstInfo, err error) {
	buf := make([]*model.FlowInstInfo, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowInstInfoDo) FindInBatches(result *[]*model.FlowInstInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowInstInfoDo) Attrs(attrs ...field.AssignExpr) *flowInstInfoDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowInstInfoDo) Assign(attrs ...field.AssignExpr) *flowInstInfoDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowInstInfoDo) Joins(fields ...field.RelationField) *flowInstInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowInstInfoDo) Preload(fields ...field.RelationField) *flowInstInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowInstInfoDo) FirstOrInit() (*model.FlowInstInfo, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowInstInfo), nil
	}
}

func (f flowInstInfoDo) FirstOrCreate() (*model.FlowInstInfo, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowInstInfo), nil
	}
}

func (f flowInstInfoDo) FindByPage(offset int, limit int) (result []*model.FlowInstInfo, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowInstInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowInstInfoDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowInstInfoDo) Delete(models ...*model.FlowInstInfo) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowInstInfoDo) withDO(do gen.Dao) *flowInstInfoDo {
	f.DO = *do.(*gen.DO)
	return f
}
