// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newModelExtProp(db *gorm.DB, opts ...gen.DOOption) modelExtProp {
	_modelExtProp := modelExtProp{}

	_modelExtProp.modelExtPropDo.UseDB(db, opts...)
	_modelExtProp.modelExtPropDo.UseModel(&model.ModelExtProp{})

	tableName := _modelExtProp.modelExtPropDo.TableName()
	_modelExtProp.ALL = field.NewAsterisk(tableName)
	_modelExtProp.ID = field.NewInt64(tableName, "id")
	_modelExtProp.ModelID = field.NewString(tableName, "model_id")
	_modelExtProp.NoticeURL = field.NewString(tableName, "notice_url")
	_modelExtProp.TitleProps = field.NewString(tableName, "title_props")

	_modelExtProp.fillFieldMap()

	return _modelExtProp
}

type modelExtProp struct {
	modelExtPropDo modelExtPropDo

	ALL        field.Asterisk
	ID         field.Int64  // 唯一id
	ModelID    field.String // 模板id
	NoticeURL  field.String // 回调通知推送url
	TitleProps field.String // 标题配置

	fieldMap map[string]field.Expr
}

func (m modelExtProp) Table(newTableName string) *modelExtProp {
	m.modelExtPropDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelExtProp) As(alias string) *modelExtProp {
	m.modelExtPropDo.DO = *(m.modelExtPropDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelExtProp) updateTableName(table string) *modelExtProp {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.ModelID = field.NewString(table, "model_id")
	m.NoticeURL = field.NewString(table, "notice_url")
	m.TitleProps = field.NewString(table, "title_props")

	m.fillFieldMap()

	return m
}

func (m *modelExtProp) WithContext(ctx context.Context) *modelExtPropDo {
	return m.modelExtPropDo.WithContext(ctx)
}

func (m modelExtProp) TableName() string { return m.modelExtPropDo.TableName() }

func (m modelExtProp) Alias() string { return m.modelExtPropDo.Alias() }

func (m *modelExtProp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelExtProp) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["model_id"] = m.ModelID
	m.fieldMap["notice_url"] = m.NoticeURL
	m.fieldMap["title_props"] = m.TitleProps
}

func (m modelExtProp) clone(db *gorm.DB) modelExtProp {
	m.modelExtPropDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelExtProp) replaceDB(db *gorm.DB) modelExtProp {
	m.modelExtPropDo.ReplaceDB(db)
	return m
}

type modelExtPropDo struct{ gen.DO }

func (m modelExtPropDo) Debug() *modelExtPropDo {
	return m.withDO(m.DO.Debug())
}

func (m modelExtPropDo) WithContext(ctx context.Context) *modelExtPropDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelExtPropDo) ReadDB() *modelExtPropDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelExtPropDo) WriteDB() *modelExtPropDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelExtPropDo) Session(config *gorm.Session) *modelExtPropDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelExtPropDo) Clauses(conds ...clause.Expression) *modelExtPropDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelExtPropDo) Returning(value interface{}, columns ...string) *modelExtPropDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelExtPropDo) Not(conds ...gen.Condition) *modelExtPropDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelExtPropDo) Or(conds ...gen.Condition) *modelExtPropDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelExtPropDo) Select(conds ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelExtPropDo) Where(conds ...gen.Condition) *modelExtPropDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelExtPropDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *modelExtPropDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m modelExtPropDo) Order(conds ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelExtPropDo) Distinct(cols ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelExtPropDo) Omit(cols ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelExtPropDo) Join(table schema.Tabler, on ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelExtPropDo) LeftJoin(table schema.Tabler, on ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelExtPropDo) RightJoin(table schema.Tabler, on ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelExtPropDo) Group(cols ...field.Expr) *modelExtPropDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelExtPropDo) Having(conds ...gen.Condition) *modelExtPropDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelExtPropDo) Limit(limit int) *modelExtPropDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelExtPropDo) Offset(offset int) *modelExtPropDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelExtPropDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *modelExtPropDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelExtPropDo) Unscoped() *modelExtPropDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelExtPropDo) Create(values ...*model.ModelExtProp) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelExtPropDo) CreateInBatches(values []*model.ModelExtProp, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelExtPropDo) Save(values ...*model.ModelExtProp) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelExtPropDo) First() (*model.ModelExtProp, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelExtProp), nil
	}
}

func (m modelExtPropDo) Take() (*model.ModelExtProp, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelExtProp), nil
	}
}

func (m modelExtPropDo) Last() (*model.ModelExtProp, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelExtProp), nil
	}
}

func (m modelExtPropDo) Find() ([]*model.ModelExtProp, error) {
	result, err := m.DO.Find()
	return result.([]*model.ModelExtProp), err
}

func (m modelExtPropDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModelExtProp, err error) {
	buf := make([]*model.ModelExtProp, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelExtPropDo) FindInBatches(result *[]*model.ModelExtProp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelExtPropDo) Attrs(attrs ...field.AssignExpr) *modelExtPropDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelExtPropDo) Assign(attrs ...field.AssignExpr) *modelExtPropDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelExtPropDo) Joins(fields ...field.RelationField) *modelExtPropDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelExtPropDo) Preload(fields ...field.RelationField) *modelExtPropDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelExtPropDo) FirstOrInit() (*model.ModelExtProp, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelExtProp), nil
	}
}

func (m modelExtPropDo) FirstOrCreate() (*model.ModelExtProp, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelExtProp), nil
	}
}

func (m modelExtPropDo) FindByPage(offset int, limit int) (result []*model.ModelExtProp, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelExtPropDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelExtPropDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelExtPropDo) Delete(models ...*model.ModelExtProp) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelExtPropDo) withDO(do gen.Dao) *modelExtPropDo {
	m.DO = *do.(*gen.DO)
	return m
}
