// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newProcessDefNode(db *gorm.DB, opts ...gen.DOOption) processDefNode {
	_processDefNode := processDefNode{}

	_processDefNode.processDefNodeDo.UseDB(db, opts...)
	_processDefNode.processDefNodeDo.UseModel(&model.ProcessDefNode{})

	tableName := _processDefNode.processDefNodeDo.TableName()
	_processDefNode.ALL = field.NewAsterisk(tableName)
	_processDefNode.ID = field.NewInt64(tableName, "id")
	_processDefNode.ProcessDefID = field.NewString(tableName, "process_def_id")
	_processDefNode.NodeID = field.NewString(tableName, "node_id")
	_processDefNode.NodeType = field.NewInt32(tableName, "node_type")
	_processDefNode.NodeName = field.NewString(tableName, "node_name")
	_processDefNode.ForwardMode = field.NewInt32(tableName, "forward_mode")
	_processDefNode.CompleteConn = field.NewInt32(tableName, "complete_conn")
	_processDefNode.PermissionMode = field.NewInt32(tableName, "permission_mode")
	_processDefNode.AllowAdd = field.NewInt32(tableName, "allow_add")
	_processDefNode.ProcessMode = field.NewInt32(tableName, "process_mode")
	_processDefNode.BusID = field.NewString(tableName, "bus_id")
	_processDefNode.BusType = field.NewString(tableName, "bus_type")
	_processDefNode.TimeLimit = field.NewInt32(tableName, "time_limit")
	_processDefNode.ConnData = field.NewString(tableName, "conn_data")
	_processDefNode.FormPerData = field.NewString(tableName, "form_per_data")
	_processDefNode.Remark = field.NewString(tableName, "remark")
	_processDefNode.CreateTime = field.NewTime(tableName, "create_time")
	_processDefNode.CreateUser = field.NewString(tableName, "create_user")
	_processDefNode.UpdateTime = field.NewTime(tableName, "update_time")
	_processDefNode.UpdateUser = field.NewString(tableName, "update_user")

	_processDefNode.fillFieldMap()

	return _processDefNode
}

type processDefNode struct {
	processDefNodeDo processDefNodeDo

	ALL            field.Asterisk
	ID             field.Int64  // 唯一id
	ProcessDefID   field.String // 流程定义id
	NodeID         field.String // 节点id
	NodeType       field.Int32  // 节点类型;1：正常节点；2：开始节点；3：结束节点；4：汇聚节点；5：条件节点
	NodeName       field.String // 节点名称
	ForwardMode    field.Int32  // 进行模式【1：并行 2：串行】
	CompleteConn   field.Int32  // 节点完成条件;通过的人数，0表示所有人通过，节点才算完成
	PermissionMode field.Int32  // 权限模式【1：协同 2：知会 3：审批】
	AllowAdd       field.Int32  // 允许加签【1：不能加签；2：允许加签】
	ProcessMode    field.Int32  // 处理模式【1：人工； 2：自动】
	BusID          field.String // 业务id
	BusType        field.String // 业务类型
	TimeLimit      field.Int32  // 处理期限时长;单位秒，0表示无期限；
	ConnData       field.String // 条件表达式;条件节点才有条件表达式
	FormPerData    field.String // 表单权限数据;节点表单权限配置，json格式
	Remark         field.String // 节点描述
	CreateTime     field.Time   // 创建时间
	CreateUser     field.String // 创建人
	UpdateTime     field.Time   // 更新时间
	UpdateUser     field.String // 更新人

	fieldMap map[string]field.Expr
}

func (p processDefNode) Table(newTableName string) *processDefNode {
	p.processDefNodeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p processDefNode) As(alias string) *processDefNode {
	p.processDefNodeDo.DO = *(p.processDefNodeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *processDefNode) updateTableName(table string) *processDefNode {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProcessDefID = field.NewString(table, "process_def_id")
	p.NodeID = field.NewString(table, "node_id")
	p.NodeType = field.NewInt32(table, "node_type")
	p.NodeName = field.NewString(table, "node_name")
	p.ForwardMode = field.NewInt32(table, "forward_mode")
	p.CompleteConn = field.NewInt32(table, "complete_conn")
	p.PermissionMode = field.NewInt32(table, "permission_mode")
	p.AllowAdd = field.NewInt32(table, "allow_add")
	p.ProcessMode = field.NewInt32(table, "process_mode")
	p.BusID = field.NewString(table, "bus_id")
	p.BusType = field.NewString(table, "bus_type")
	p.TimeLimit = field.NewInt32(table, "time_limit")
	p.ConnData = field.NewString(table, "conn_data")
	p.FormPerData = field.NewString(table, "form_per_data")
	p.Remark = field.NewString(table, "remark")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateUser = field.NewString(table, "create_user")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.UpdateUser = field.NewString(table, "update_user")

	p.fillFieldMap()

	return p
}

func (p *processDefNode) WithContext(ctx context.Context) *processDefNodeDo {
	return p.processDefNodeDo.WithContext(ctx)
}

func (p processDefNode) TableName() string { return p.processDefNodeDo.TableName() }

func (p processDefNode) Alias() string { return p.processDefNodeDo.Alias() }

func (p *processDefNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *processDefNode) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 20)
	p.fieldMap["id"] = p.ID
	p.fieldMap["process_def_id"] = p.ProcessDefID
	p.fieldMap["node_id"] = p.NodeID
	p.fieldMap["node_type"] = p.NodeType
	p.fieldMap["node_name"] = p.NodeName
	p.fieldMap["forward_mode"] = p.ForwardMode
	p.fieldMap["complete_conn"] = p.CompleteConn
	p.fieldMap["permission_mode"] = p.PermissionMode
	p.fieldMap["allow_add"] = p.AllowAdd
	p.fieldMap["process_mode"] = p.ProcessMode
	p.fieldMap["bus_id"] = p.BusID
	p.fieldMap["bus_type"] = p.BusType
	p.fieldMap["time_limit"] = p.TimeLimit
	p.fieldMap["conn_data"] = p.ConnData
	p.fieldMap["form_per_data"] = p.FormPerData
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_user"] = p.CreateUser
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["update_user"] = p.UpdateUser
}

func (p processDefNode) clone(db *gorm.DB) processDefNode {
	p.processDefNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p processDefNode) replaceDB(db *gorm.DB) processDefNode {
	p.processDefNodeDo.ReplaceDB(db)
	return p
}

type processDefNodeDo struct{ gen.DO }

func (p processDefNodeDo) Debug() *processDefNodeDo {
	return p.withDO(p.DO.Debug())
}

func (p processDefNodeDo) WithContext(ctx context.Context) *processDefNodeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processDefNodeDo) ReadDB() *processDefNodeDo {
	return p.Clauses(dbresolver.Read)
}

func (p processDefNodeDo) WriteDB() *processDefNodeDo {
	return p.Clauses(dbresolver.Write)
}

func (p processDefNodeDo) Session(config *gorm.Session) *processDefNodeDo {
	return p.withDO(p.DO.Session(config))
}

func (p processDefNodeDo) Clauses(conds ...clause.Expression) *processDefNodeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processDefNodeDo) Returning(value interface{}, columns ...string) *processDefNodeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processDefNodeDo) Not(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processDefNodeDo) Or(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processDefNodeDo) Select(conds ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processDefNodeDo) Where(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processDefNodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *processDefNodeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p processDefNodeDo) Order(conds ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processDefNodeDo) Distinct(cols ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processDefNodeDo) Omit(cols ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processDefNodeDo) Join(table schema.Tabler, on ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processDefNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processDefNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processDefNodeDo) Group(cols ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processDefNodeDo) Having(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processDefNodeDo) Limit(limit int) *processDefNodeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processDefNodeDo) Offset(offset int) *processDefNodeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processDefNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *processDefNodeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processDefNodeDo) Unscoped() *processDefNodeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processDefNodeDo) Create(values ...*model.ProcessDefNode) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processDefNodeDo) CreateInBatches(values []*model.ProcessDefNode, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processDefNodeDo) Save(values ...*model.ProcessDefNode) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processDefNodeDo) First() (*model.ProcessDefNode, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) Take() (*model.ProcessDefNode, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) Last() (*model.ProcessDefNode, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) Find() ([]*model.ProcessDefNode, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProcessDefNode), err
}

func (p processDefNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProcessDefNode, err error) {
	buf := make([]*model.ProcessDefNode, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processDefNodeDo) FindInBatches(result *[]*model.ProcessDefNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processDefNodeDo) Attrs(attrs ...field.AssignExpr) *processDefNodeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processDefNodeDo) Assign(attrs ...field.AssignExpr) *processDefNodeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processDefNodeDo) Joins(fields ...field.RelationField) *processDefNodeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processDefNodeDo) Preload(fields ...field.RelationField) *processDefNodeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processDefNodeDo) FirstOrInit() (*model.ProcessDefNode, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) FirstOrCreate() (*model.ProcessDefNode, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) FindByPage(offset int, limit int) (result []*model.ProcessDefNode, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processDefNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processDefNodeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processDefNodeDo) Delete(models ...*model.ProcessDefNode) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processDefNodeDo) withDO(do gen.Dao) *processDefNodeDo {
	p.DO = *do.(*gen.DO)
	return p
}
