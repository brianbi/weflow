// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wegoteam/weflow/pkg/model"
)

func newProcessDefNode(db *gorm.DB, opts ...gen.DOOption) processDefNode {
	_processDefNode := processDefNode{}

	_processDefNode.processDefNodeDo.UseDB(db, opts...)
	_processDefNode.processDefNodeDo.UseModel(&model.ProcessDefNode{})

	tableName := _processDefNode.processDefNodeDo.TableName()
	_processDefNode.ALL = field.NewAsterisk(tableName)
	_processDefNode.ID = field.NewInt64(tableName, "id")
	_processDefNode.ProcessDefID = field.NewString(tableName, "process_def_id")
	_processDefNode.NodeID = field.NewString(tableName, "node_id")
	_processDefNode.NodeModel = field.NewInt32(tableName, "node_model")
	_processDefNode.NodeName = field.NewString(tableName, "node_name")
	_processDefNode.ParentID = field.NewString(tableName, "parent_id")
	_processDefNode.ApproveType = field.NewInt32(tableName, "approve_type")
	_processDefNode.NoneHandler = field.NewInt32(tableName, "none_handler")
	_processDefNode.AppointHandler = field.NewString(tableName, "appoint_handler")
	_processDefNode.HandleMode = field.NewInt32(tableName, "handle_mode")
	_processDefNode.FinishMode = field.NewInt32(tableName, "finish_mode")
	_processDefNode.BranchMode = field.NewInt32(tableName, "branch_mode")
	_processDefNode.DefaultBranch = field.NewInt32(tableName, "default_branch")
	_processDefNode.BranchLevel = field.NewInt32(tableName, "branch_level")
	_processDefNode.ConditionGroup = field.NewString(tableName, "condition_group")
	_processDefNode.ConditionExpr = field.NewString(tableName, "condition_expr")
	_processDefNode.Remark = field.NewString(tableName, "remark")
	_processDefNode.PreNodes = field.NewString(tableName, "pre_nodes")
	_processDefNode.NextNodes = field.NewString(tableName, "next_nodes")
	_processDefNode.LastNodes = field.NewString(tableName, "last_nodes")
	_processDefNode.Index = field.NewInt32(tableName, "index")
	_processDefNode.BranchIndex = field.NewInt32(tableName, "branch_index")

	_processDefNode.fillFieldMap()

	return _processDefNode
}

type processDefNode struct {
	processDefNodeDo processDefNodeDo

	ALL            field.Asterisk
	ID             field.Int64  // 唯一id
	ProcessDefID   field.String // 流程定义id
	NodeID         field.String // 节点id
	NodeModel      field.Int32  // 节点模型【1：开始节点；2：审批节点；3：办理节点；4：抄送节点；5：自定义节点；6：条件节点；7：分支节点；8：汇聚节点；9：结束节点】
	NodeName       field.String // 节点名称
	ParentID       field.String // 节点父ID
	ApproveType    field.Int32  // 审批类型【人工审批：1；自动通过：2；自动拒绝】默认人工审批1
	NoneHandler    field.Int32  // 审批人为空时【自动通过：1；自动转交管理员：2；指定审批人：3】默认自动通过1
	AppointHandler field.String // 审批人为空时指定审批人ID
	HandleMode     field.Int32  // 审批方式【依次审批：1、会签（需要完成人数的审批人同意或拒绝才可完成节点）：2、或签（其中一名审批人同意或拒绝即可）：3】默认会签2
	FinishMode     field.Int32  // 完成人数：依次审批默认0所有人不可选人，会签默认0所有人（可选人大于0），或签默认1一个人（可选人大于0）
	BranchMode     field.Int32  // 分支执行方式【单分支：1；多分支：2】默认多分支2
	DefaultBranch  field.Int32  // 单分支处理需要默认分支，在条件优先级无法处理时候执行默认分支，取值分支下标
	BranchLevel    field.Int32  // 优先级，分支执行方式为多分支处理方式无优先级应为0
	ConditionGroup field.String // 条件组前端描述展示条件组
	ConditionExpr  field.String // 条件组解析后的表达式
	Remark         field.String // 节点描述
	PreNodes       field.String // 上节点ID集合,多个用逗号隔开
	NextNodes      field.String // 下节点ID集合,多个用逗号隔开
	LastNodes      field.String // 尾节点ID集合,多个用逗号隔开
	Index          field.Int32  // 节点下标
	BranchIndex    field.Int32  // 分支节点下标

	fieldMap map[string]field.Expr
}

func (p processDefNode) Table(newTableName string) *processDefNode {
	p.processDefNodeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p processDefNode) As(alias string) *processDefNode {
	p.processDefNodeDo.DO = *(p.processDefNodeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *processDefNode) updateTableName(table string) *processDefNode {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProcessDefID = field.NewString(table, "process_def_id")
	p.NodeID = field.NewString(table, "node_id")
	p.NodeModel = field.NewInt32(table, "node_model")
	p.NodeName = field.NewString(table, "node_name")
	p.ParentID = field.NewString(table, "parent_id")
	p.ApproveType = field.NewInt32(table, "approve_type")
	p.NoneHandler = field.NewInt32(table, "none_handler")
	p.AppointHandler = field.NewString(table, "appoint_handler")
	p.HandleMode = field.NewInt32(table, "handle_mode")
	p.FinishMode = field.NewInt32(table, "finish_mode")
	p.BranchMode = field.NewInt32(table, "branch_mode")
	p.DefaultBranch = field.NewInt32(table, "default_branch")
	p.BranchLevel = field.NewInt32(table, "branch_level")
	p.ConditionGroup = field.NewString(table, "condition_group")
	p.ConditionExpr = field.NewString(table, "condition_expr")
	p.Remark = field.NewString(table, "remark")
	p.PreNodes = field.NewString(table, "pre_nodes")
	p.NextNodes = field.NewString(table, "next_nodes")
	p.LastNodes = field.NewString(table, "last_nodes")
	p.Index = field.NewInt32(table, "index")
	p.BranchIndex = field.NewInt32(table, "branch_index")

	p.fillFieldMap()

	return p
}

func (p *processDefNode) WithContext(ctx context.Context) *processDefNodeDo {
	return p.processDefNodeDo.WithContext(ctx)
}

func (p processDefNode) TableName() string { return p.processDefNodeDo.TableName() }

func (p processDefNode) Alias() string { return p.processDefNodeDo.Alias() }

func (p *processDefNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *processDefNode) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 22)
	p.fieldMap["id"] = p.ID
	p.fieldMap["process_def_id"] = p.ProcessDefID
	p.fieldMap["node_id"] = p.NodeID
	p.fieldMap["node_model"] = p.NodeModel
	p.fieldMap["node_name"] = p.NodeName
	p.fieldMap["parent_id"] = p.ParentID
	p.fieldMap["approve_type"] = p.ApproveType
	p.fieldMap["none_handler"] = p.NoneHandler
	p.fieldMap["appoint_handler"] = p.AppointHandler
	p.fieldMap["handle_mode"] = p.HandleMode
	p.fieldMap["finish_mode"] = p.FinishMode
	p.fieldMap["branch_mode"] = p.BranchMode
	p.fieldMap["default_branch"] = p.DefaultBranch
	p.fieldMap["branch_level"] = p.BranchLevel
	p.fieldMap["condition_group"] = p.ConditionGroup
	p.fieldMap["condition_expr"] = p.ConditionExpr
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["pre_nodes"] = p.PreNodes
	p.fieldMap["next_nodes"] = p.NextNodes
	p.fieldMap["last_nodes"] = p.LastNodes
	p.fieldMap["index"] = p.Index
	p.fieldMap["branch_index"] = p.BranchIndex
}

func (p processDefNode) clone(db *gorm.DB) processDefNode {
	p.processDefNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p processDefNode) replaceDB(db *gorm.DB) processDefNode {
	p.processDefNodeDo.ReplaceDB(db)
	return p
}

type processDefNodeDo struct{ gen.DO }

func (p processDefNodeDo) Debug() *processDefNodeDo {
	return p.withDO(p.DO.Debug())
}

func (p processDefNodeDo) WithContext(ctx context.Context) *processDefNodeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processDefNodeDo) ReadDB() *processDefNodeDo {
	return p.Clauses(dbresolver.Read)
}

func (p processDefNodeDo) WriteDB() *processDefNodeDo {
	return p.Clauses(dbresolver.Write)
}

func (p processDefNodeDo) Session(config *gorm.Session) *processDefNodeDo {
	return p.withDO(p.DO.Session(config))
}

func (p processDefNodeDo) Clauses(conds ...clause.Expression) *processDefNodeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processDefNodeDo) Returning(value interface{}, columns ...string) *processDefNodeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processDefNodeDo) Not(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processDefNodeDo) Or(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processDefNodeDo) Select(conds ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processDefNodeDo) Where(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processDefNodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *processDefNodeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p processDefNodeDo) Order(conds ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processDefNodeDo) Distinct(cols ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processDefNodeDo) Omit(cols ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processDefNodeDo) Join(table schema.Tabler, on ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processDefNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processDefNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processDefNodeDo) Group(cols ...field.Expr) *processDefNodeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processDefNodeDo) Having(conds ...gen.Condition) *processDefNodeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processDefNodeDo) Limit(limit int) *processDefNodeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processDefNodeDo) Offset(offset int) *processDefNodeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processDefNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *processDefNodeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processDefNodeDo) Unscoped() *processDefNodeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processDefNodeDo) Create(values ...*model.ProcessDefNode) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processDefNodeDo) CreateInBatches(values []*model.ProcessDefNode, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processDefNodeDo) Save(values ...*model.ProcessDefNode) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processDefNodeDo) First() (*model.ProcessDefNode, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) Take() (*model.ProcessDefNode, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) Last() (*model.ProcessDefNode, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) Find() ([]*model.ProcessDefNode, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProcessDefNode), err
}

func (p processDefNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProcessDefNode, err error) {
	buf := make([]*model.ProcessDefNode, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processDefNodeDo) FindInBatches(result *[]*model.ProcessDefNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processDefNodeDo) Attrs(attrs ...field.AssignExpr) *processDefNodeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processDefNodeDo) Assign(attrs ...field.AssignExpr) *processDefNodeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processDefNodeDo) Joins(fields ...field.RelationField) *processDefNodeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processDefNodeDo) Preload(fields ...field.RelationField) *processDefNodeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processDefNodeDo) FirstOrInit() (*model.ProcessDefNode, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) FirstOrCreate() (*model.ProcessDefNode, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessDefNode), nil
	}
}

func (p processDefNodeDo) FindByPage(offset int, limit int) (result []*model.ProcessDefNode, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processDefNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processDefNodeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processDefNodeDo) Delete(models ...*model.ProcessDefNode) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processDefNodeDo) withDO(do gen.Dao) *processDefNodeDo {
	p.DO = *do.(*gen.DO)
	return p
}
