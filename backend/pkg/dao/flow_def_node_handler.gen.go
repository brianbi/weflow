// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wego2023/weflow/pkg/model"
)

func newFlowDefNodeHandler(db *gorm.DB, opts ...gen.DOOption) flowDefNodeHandler {
	_flowDefNodeHandler := flowDefNodeHandler{}

	_flowDefNodeHandler.flowDefNodeHandlerDo.UseDB(db, opts...)
	_flowDefNodeHandler.flowDefNodeHandlerDo.UseModel(&model.FlowDefNodeHandler{})

	tableName := _flowDefNodeHandler.flowDefNodeHandlerDo.TableName()
	_flowDefNodeHandler.ALL = field.NewAsterisk(tableName)
	_flowDefNodeHandler.ID = field.NewInt64(tableName, "id")
	_flowDefNodeHandler.FlowDefID = field.NewString(tableName, "flow_def_id")
	_flowDefNodeHandler.NodeID = field.NewString(tableName, "node_id")
	_flowDefNodeHandler.HandlerName = field.NewString(tableName, "handler_name")
	_flowDefNodeHandler.HandlerType = field.NewInt32(tableName, "handler_type")
	_flowDefNodeHandler.HandlerID = field.NewString(tableName, "handler_id")
	_flowDefNodeHandler.HandlerSort = field.NewInt32(tableName, "handler_sort")
	_flowDefNodeHandler.ObjData = field.NewString(tableName, "obj_data")
	_flowDefNodeHandler.CreateTime = field.NewTime(tableName, "create_time")
	_flowDefNodeHandler.CreateUser = field.NewString(tableName, "create_user")
	_flowDefNodeHandler.UpdateTime = field.NewTime(tableName, "update_time")
	_flowDefNodeHandler.UpdateUser = field.NewString(tableName, "update_user")

	_flowDefNodeHandler.fillFieldMap()

	return _flowDefNodeHandler
}

type flowDefNodeHandler struct {
	flowDefNodeHandlerDo flowDefNodeHandlerDo

	ALL         field.Asterisk
	ID          field.Int64  // 唯一id
	FlowDefID   field.String // 流程定义id
	NodeID      field.String // 节点id
	HandlerName field.String // 处理人名称
	HandlerType field.Int32  // 处理人类型【1：用户；2：部门；3：相对岗位；4：表单控件；5：部门岗位】
	HandlerID   field.String // 处理人对象id;处理对象的id，根据处理人类型区分，如果操作员id、部门id等
	HandlerSort field.Int32  // 处理人顺序;正序排序
	ObjData     field.String // 对象数据;依据处理人类型取值，相对岗位和表单控件使用该字段存json数据
	CreateTime  field.Time   // 创建时间
	CreateUser  field.String // 创建人
	UpdateTime  field.Time   // 更新时间
	UpdateUser  field.String // 更新人

	fieldMap map[string]field.Expr
}

func (f flowDefNodeHandler) Table(newTableName string) *flowDefNodeHandler {
	f.flowDefNodeHandlerDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowDefNodeHandler) As(alias string) *flowDefNodeHandler {
	f.flowDefNodeHandlerDo.DO = *(f.flowDefNodeHandlerDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowDefNodeHandler) updateTableName(table string) *flowDefNodeHandler {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FlowDefID = field.NewString(table, "flow_def_id")
	f.NodeID = field.NewString(table, "node_id")
	f.HandlerName = field.NewString(table, "handler_name")
	f.HandlerType = field.NewInt32(table, "handler_type")
	f.HandlerID = field.NewString(table, "handler_id")
	f.HandlerSort = field.NewInt32(table, "handler_sort")
	f.ObjData = field.NewString(table, "obj_data")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateUser = field.NewString(table, "create_user")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.UpdateUser = field.NewString(table, "update_user")

	f.fillFieldMap()

	return f
}

func (f *flowDefNodeHandler) WithContext(ctx context.Context) *flowDefNodeHandlerDo {
	return f.flowDefNodeHandlerDo.WithContext(ctx)
}

func (f flowDefNodeHandler) TableName() string { return f.flowDefNodeHandlerDo.TableName() }

func (f flowDefNodeHandler) Alias() string { return f.flowDefNodeHandlerDo.Alias() }

func (f *flowDefNodeHandler) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowDefNodeHandler) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["id"] = f.ID
	f.fieldMap["flow_def_id"] = f.FlowDefID
	f.fieldMap["node_id"] = f.NodeID
	f.fieldMap["handler_name"] = f.HandlerName
	f.fieldMap["handler_type"] = f.HandlerType
	f.fieldMap["handler_id"] = f.HandlerID
	f.fieldMap["handler_sort"] = f.HandlerSort
	f.fieldMap["obj_data"] = f.ObjData
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_user"] = f.CreateUser
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["update_user"] = f.UpdateUser
}

func (f flowDefNodeHandler) clone(db *gorm.DB) flowDefNodeHandler {
	f.flowDefNodeHandlerDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowDefNodeHandler) replaceDB(db *gorm.DB) flowDefNodeHandler {
	f.flowDefNodeHandlerDo.ReplaceDB(db)
	return f
}

type flowDefNodeHandlerDo struct{ gen.DO }

func (f flowDefNodeHandlerDo) Debug() *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Debug())
}

func (f flowDefNodeHandlerDo) WithContext(ctx context.Context) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowDefNodeHandlerDo) ReadDB() *flowDefNodeHandlerDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowDefNodeHandlerDo) WriteDB() *flowDefNodeHandlerDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowDefNodeHandlerDo) Session(config *gorm.Session) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowDefNodeHandlerDo) Clauses(conds ...clause.Expression) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowDefNodeHandlerDo) Returning(value interface{}, columns ...string) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowDefNodeHandlerDo) Not(conds ...gen.Condition) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowDefNodeHandlerDo) Or(conds ...gen.Condition) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowDefNodeHandlerDo) Select(conds ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowDefNodeHandlerDo) Where(conds ...gen.Condition) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowDefNodeHandlerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *flowDefNodeHandlerDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f flowDefNodeHandlerDo) Order(conds ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowDefNodeHandlerDo) Distinct(cols ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowDefNodeHandlerDo) Omit(cols ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowDefNodeHandlerDo) Join(table schema.Tabler, on ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowDefNodeHandlerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowDefNodeHandlerDo) RightJoin(table schema.Tabler, on ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowDefNodeHandlerDo) Group(cols ...field.Expr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowDefNodeHandlerDo) Having(conds ...gen.Condition) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowDefNodeHandlerDo) Limit(limit int) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowDefNodeHandlerDo) Offset(offset int) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowDefNodeHandlerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowDefNodeHandlerDo) Unscoped() *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowDefNodeHandlerDo) Create(values ...*model.FlowDefNodeHandler) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowDefNodeHandlerDo) CreateInBatches(values []*model.FlowDefNodeHandler, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowDefNodeHandlerDo) Save(values ...*model.FlowDefNodeHandler) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowDefNodeHandlerDo) First() (*model.FlowDefNodeHandler, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefNodeHandler), nil
	}
}

func (f flowDefNodeHandlerDo) Take() (*model.FlowDefNodeHandler, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefNodeHandler), nil
	}
}

func (f flowDefNodeHandlerDo) Last() (*model.FlowDefNodeHandler, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefNodeHandler), nil
	}
}

func (f flowDefNodeHandlerDo) Find() ([]*model.FlowDefNodeHandler, error) {
	result, err := f.DO.Find()
	return result.([]*model.FlowDefNodeHandler), err
}

func (f flowDefNodeHandlerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowDefNodeHandler, err error) {
	buf := make([]*model.FlowDefNodeHandler, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowDefNodeHandlerDo) FindInBatches(result *[]*model.FlowDefNodeHandler, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowDefNodeHandlerDo) Attrs(attrs ...field.AssignExpr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowDefNodeHandlerDo) Assign(attrs ...field.AssignExpr) *flowDefNodeHandlerDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowDefNodeHandlerDo) Joins(fields ...field.RelationField) *flowDefNodeHandlerDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowDefNodeHandlerDo) Preload(fields ...field.RelationField) *flowDefNodeHandlerDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowDefNodeHandlerDo) FirstOrInit() (*model.FlowDefNodeHandler, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefNodeHandler), nil
	}
}

func (f flowDefNodeHandlerDo) FirstOrCreate() (*model.FlowDefNodeHandler, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowDefNodeHandler), nil
	}
}

func (f flowDefNodeHandlerDo) FindByPage(offset int, limit int) (result []*model.FlowDefNodeHandler, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowDefNodeHandlerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowDefNodeHandlerDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowDefNodeHandlerDo) Delete(models ...*model.FlowDefNodeHandler) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowDefNodeHandlerDo) withDO(do gen.Dao) *flowDefNodeHandlerDo {
	f.DO = *do.(*gen.DO)
	return f
}
