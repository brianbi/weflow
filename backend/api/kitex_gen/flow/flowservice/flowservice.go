// Code generated by Kitex v0.4.4. DO NOT EDIT.

package flowservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	common "github.com/wegoteam/weflow/api/kitex_gen/common"
	flow "github.com/wegoteam/weflow/api/kitex_gen/flow"
)

func serviceInfo() *kitex.ServiceInfo {
	return flowServiceServiceInfo
}

var flowServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FlowService"
	handlerType := (*flow.FlowService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getList":   kitex.NewMethodInfo(getListHandler, newFlowServiceGetListArgs, newFlowServiceGetListResult, false),
		"getMap":    kitex.NewMethodInfo(getMapHandler, newFlowServiceGetMapArgs, newFlowServiceGetMapResult, false),
		"getPerson": kitex.NewMethodInfo(getPersonHandler, newFlowServiceGetPersonArgs, newFlowServiceGetPersonResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "flow",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*flow.FlowServiceGetListResult)
	success, err := handler.(flow.FlowService).GetList(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFlowServiceGetListArgs() interface{} {
	return flow.NewFlowServiceGetListArgs()
}

func newFlowServiceGetListResult() interface{} {
	return flow.NewFlowServiceGetListResult()
}

func getMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*flow.FlowServiceGetMapArgs)
	realResult := result.(*flow.FlowServiceGetMapResult)
	success, err := handler.(flow.FlowService).GetMap(ctx, realArg.Key)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFlowServiceGetMapArgs() interface{} {
	return flow.NewFlowServiceGetMapArgs()
}

func newFlowServiceGetMapResult() interface{} {
	return flow.NewFlowServiceGetMapResult()
}

func getPersonHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*flow.FlowServiceGetPersonArgs)
	realResult := result.(*flow.FlowServiceGetPersonResult)
	success, err := handler.(flow.FlowService).GetPerson(ctx, realArg.Name)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFlowServiceGetPersonArgs() interface{} {
	return flow.NewFlowServiceGetPersonArgs()
}

func newFlowServiceGetPersonResult() interface{} {
	return flow.NewFlowServiceGetPersonResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetList(ctx context.Context) (r []*flow.Person, err error) {
	var _args flow.FlowServiceGetListArgs
	var _result flow.FlowServiceGetListResult
	if err = p.c.Call(ctx, "getList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMap(ctx context.Context, key string) (r map[string]int32, err error) {
	var _args flow.FlowServiceGetMapArgs
	_args.Key = key
	var _result flow.FlowServiceGetMapResult
	if err = p.c.Call(ctx, "getMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPerson(ctx context.Context, name string) (r *common.Response, err error) {
	var _args flow.FlowServiceGetPersonArgs
	_args.Name = name
	var _result flow.FlowServiceGetPersonResult
	if err = p.c.Call(ctx, "getPerson", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
